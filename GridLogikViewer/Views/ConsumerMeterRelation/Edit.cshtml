@model GridLogikViewer.Models.MstConsumerMeterRelation
@using GridLogikViewer.Extensions
@{
    ViewBag.Title = "Edit";
}
@section scripts
{

    <script>
        var box;
        $(document).ready(function () {

            new confirmexitmsg('form');
            $("#btnReset").click(function (e) {
                formmodified = 0;
                location.reload(true);
            });
            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",
                //url: "http://localhost:8487/GridLogikViewerWebAPI/api/consumer",
                url: BaseAddress + "consumer",
                dataType: "json",
                async: false,
                success: function (consumers, status, jqXHR) {
                    var str = "";
                    str = "<option value>Select Consumer</option>";
                    if (consumers.Data.result != undefined) {
                        var data = consumers.Data.result;
                        for (var i in data) {
                            str += "<option value=" + data[i].csmrmasterid + ">" + data[i].csmrfirstname + "</option>";

                        }
                    }
                    else if (consumers.Data.e == "E") {
                        if (consumers.Data.d.length > 0)
                            //alert(consumers.Data.d);

                        alert(consumers.Data.d, '', false, "E");
                    }

                    $("#cmrconsumermasterid").html(str);
                    $(".consumerclasses").selectpicker();
                }
            });

            //Fill Meter DropDown
            debugger;
            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",
                url: BaseAddress +"ConsumerMeterList/GetAllMetersByuseridEdit?Userid="+@HttpContext.Current.Session["usrrecid"] +"",// "ConsumerMeterList/1",
                dataType: "json",
                async: false,
                success: function (meters, status, jqXHR) {
                 
                    var str1 = "";
                    str1 = "<option value>Select Parent Meter</option>";
                    $("#parentcmrmeterid").html(str1);
                    var str = "";
                    str = "<option value>Select Meter</option>";
                    if (meters.Data.result != undefined) {
                        var data = meters.Data.result;
                        for (var i in data) {
                            str += "<option value=" + data[i].id + ">" + data[i].metername + "</option>";

                        }
                    }
                    else if (meters.Data.e == "E") {
                        if (meters.Data.d.length > 0)
                         //   alert(meters.Data.d);
                        alert(meters.Data.d, '', false, "E");
                    }
                    $("#cmrmeterid").html(str);
                    $(".meterclasses").selectpicker();
                }
            });

            //Get Dateformat and Set it to datepickers
            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",
                url: BaseAddress + "prmglobal",
                dataType: "json",
                async: false,
                success: function (dateformat, status, jqXHR) {
                    var str = "";
                    if (dateformat.Data.result != undefined) {

                        var data = dateformat.Data.result;
                        for (var i in data) {
                            if (data[i].prmunit == "DateField") {
                                $("#Dateformat").val(data[i].prmvalue);
                                //$('#cmrrelationshipstartdate').datepicker("options", "dateFormat", data[i].prmvalue);
                                //$("#cmrrelationshipenddate").datepicker("options", "dateFormat", data[i].prmvalue);
                                //$('#cmrservicestartdate').datepicker("options", "dateFormat", data[i].prmvalue);
                                //$("#cmrserviceenddate").datepicker("options", "dateFormat", data[i].prmvalue);
                            }
                            else if (data[i].prmunit == "ServerDate") {
                                $("#ServerDateformat").val(data[i].prmvalue);
                            }
                            else if (data[i].prmunit == "DatabaseDate") {
                                $("#DatabaseDateformat").val(data[i].prmvalue);
                            }
                        }
                        //var id =@this.ViewContext.RouteData.Values["id"]
                        //SetDateFormat(id);
                    }
                    else if (dateformat.Data.e == "E") {
                        if (dateformat.Data.d.length > 0)
                            alert(dateformat.Data.d, '', false, "E");
                            //alert(dateformat.Data.d);
                    }
                }
            });



            //Set textbox as datepicker
            $(function () {
                $('#cmrrelationshipstartdate').datepicker({
                    dateFormat: $("#Dateformat").val(),
                    changeMonth: true,
                    changeYear: true
                });
            });

            //Set textbox as datepicker
            $(function () {
                $("#cmrrelationshipenddate").datepicker({
                    dateFormat: $("#Dateformat").val(),
                    changeMonth: true,
                    changeYear: true
                });
            });

            //Set textbox as datepicker
            $(function () {
                $("#cmrservicestartdate").datepicker({
                    dateFormat: $("#Dateformat").val(),
                    changeMonth: true,
                    changeYear: true
                });
            });

            //Set textbox as datepicker
            $(function () {
                $("#cmrserviceenddate").datepicker({
                    dateFormat: $("#Dateformat").val(),
                    changeMonth: true,
                    changeYear: true
                });
            });


            var id =@this.ViewContext.RouteData.Values["id"]
                $.ajax({
                    //url: "http://localhost:8487/GridLogikViewerWebAPI/api/consumermeterrelation" + id,
                    url: BaseAddress + "consumermeterrelation/" + id,
                    type: "GET",
                    contentType: "application/json;charset=utf-8",//type of data to be send
                    dataType: "json",//type of data to be received
                    async: false,
                    success: function (response) {
                        if (response.Data.result.cmrrecid == null) {
                            if (response.Data.d.length > 0)
                                alert(response.Data.d, '', false, "M");
                            return false;
                        }
                        else {
                            $("#cmrcurrconnloadkw").val(response.Data.result.cmrcurrconnloadkw);
                            $("#cmdcurrcontractdemandkva").val(response.Data.result.cmdcurrcontractdemandkva);
                            $("#cmrrecid").val(response.Data.result.cmrrecid);
                            $("#cmrconsumerid").val(response.Data.result.cmrconsumerid);
                           
                            $("#cmrconsumermasterid").val(response.Data.result.cmrconsumermasterid);
                            $(".consumerclasses").selectpicker('val', response.Data.result.cmrconsumermasterid);
                            $("#cmrmeterid").val(response.Data.result.cmrmeterid);
                            $(".meterclasses").selectpicker('val', response.Data.result.cmrmeterid);
                            var cmrId = $('#cmrconsumermasterid').val();
                            var MeterId = $('#cmrmeterid').val();
                            if (cmrId != null && cmrId != "" && MeterId != null && MeterId != "") {
                                $("#parentcmrmeterid").empty();
                                FillParentMeter(cmrId, MeterId);
                            } else {
                                $("#parentcmrmeterid").empty();
                                var str1 = "";
                                str1 = "<option value>Select Parent Meter</option>";
                                $("#parentcmrmeterid").html(str1);
                            }
                          
                            var DBDOBDate = moment(response.Data.result.cmrrelationshipstartdate, $("#DatabaseDateformat").val());
                            var DOBDate = $.datepicker.formatDate($("#Dateformat").val(), new Date(DBDOBDate))
                            $("#cmrrelationshipstartdate").val(DOBDate);
                            //$("#cmrrelationshipstartdate").val(response.Data.result.cmrrelationshipstartdate);

                          //  var DBDOBDate = moment(response.Data.result.cmrrelationshipenddate, $("#DatabaseDateformat").val());
                           // var DOBDate = $.datepicker.formatDate($("#Dateformat").val(), new Date(DBDOBDate))
                             //$("#cmrrelationshipenddate").val(DOBDate);

                            //$("#cmrrelationshipenddate").val(response.Data.result.cmrrelationshipenddate);
                            if (response.Data.result.cmrservicestartdate != null && response.Data.result.cmrservicestartdate != "") {
                                var DBDOBDate = moment(response.Data.result.cmrservicestartdate, $("#DatabaseDateformat").val());
                                var DOBDate = $.datepicker.formatDate($("#Dateformat").val(), new Date(DBDOBDate))
                                $("#cmrservicestartdate").val(DOBDate);
                            }
                            //$("#cmrservicestartdate").val(response.Data.result.cmrservicestartdate);
                            if (response.Data.result.cmrserviceenddate != null && response.Data.result.cmrserviceenddate != "") {
                                var DBDOBDate = moment(response.Data.result.cmrserviceenddate, $("#DatabaseDateformat").val());
                                var DOBDate = $.datepicker.formatDate($("#Dateformat").val(), new Date(DBDOBDate))
                                $("#cmrserviceenddate").val(DOBDate);
                            }
                            // $("#cmrserviceenddate").val(response.Data.result.cmrserviceenddate);
                            //  $("#tagforsubmeter").val(response.Data.result.tagforsubmeter);

                            response.Data.result.tagforsubmeter == 1 ? $('#tagforsubmeter').prop('checked', true) : $('#tagforsubmeter').prop('checked', false);

                            if ($("#tagforsubmeter").prop("checked")) {

                                $("#parentcmrmeterid").val(response.Data.result.cmrparentmeterid);
                                $(".meterclasses").selectpicker('val', response.Data.result.cmrparentmeterid);
                                $("#parentcmrmeterid").prop("disabled", false);
                            } else {
                                $("#parentcmrmeterid").val('');
                            }
                            return false;
                        }
                    },
                    error: function (xhr) {

                        alert(xhr.responseText);
                    }
                });
            $("#btnUpdate").click(function (e) {
                var conLoad = $("#cmrcurrconnloadkw").val();
                var proLoad = $("#cmdcurrcontractdemandkva").val();
                if (($("#cmrcurrconnloadkw").val() != "" && $("#cmdcurrcontractdemandkva").val() != "") && (parseInt(conLoad) < parseInt(proLoad))) {
                    alert("Provided load cannot be greater than contracted load", '', false, "M");
                    return false;
                }
                if ($('form').valid() && dateCal('cmrrelationshipstartdate', 'cmrrelationshipenddate', '1', 'cmrrelationshipstartdate') && ServiceVl('cmrservicestartdate', 'cmrserviceenddate', '2', 'cmrserviceenddate') && dateCal('cmrservicestartdate', 'cmrserviceenddate', '2', 'cmrservicestartdate') && dateCal('cmrrelationshipstartdate', 'cmrservicestartdate', '3', 'cmrrelationshipstartdate') && CheckParentMeter() && ParentMeterChange()) {
               // if ($('form').valid() && dateCal('cmrrelationshipstartdate', 'cmrrelationshipenddate', '1', 'cmrrelationshipstartdate') && dateCal('cmrservicestartdate', 'cmrserviceenddate', '2', 'cmrservicestartdate') && CheckParentMeter() && ParentMeterChange()) {
                    formmodified = 0;
                    var mstconsumermeterrelation = {
                        "cmrconsumerid": $("#cmrconsumerid").val(),
                        // "cmrconsumerid": $("#ConsumerMasterClasses").val(),
                        "cmrconsumermasterid": $("#cmrconsumermasterid").val(),
                        // "cmrmeterid": $("#cmrmeterid").val(),
                        "cmrmeterid": $("#cmrmeterid").val(),
                        //"cmrrelationshipstartdate": $("#cmrrelationshipstartdate").val(),
                        "cmrrelationshipstartdate": GetFinaldate($("#cmrrelationshipstartdate").val(), $("#ServerDateformat").val(), $("#Dateformat").val()),
                        //"cmrrelationshipenddate": $("#cmrrelationshipenddate").val(),
                        //"cmrrelationshipenddate": GetFinaldate($("#cmrrelationshipenddate").val(), $("#ServerDateformat").val(), $("#Dateformat").val()),
                        //"cmrservicestartdate": $("#cmrservicestartdate").val(),
                        "cmrservicestartdate": GetFinaldate($("#cmrservicestartdate").val(), $("#ServerDateformat").val(), $("#Dateformat").val()),
                        //"cmrserviceenddate": $("#cmrserviceenddate").val(),
                       // "cmrserviceenddate": GetFinaldate($("#cmrserviceenddate").val(), $("#ServerDateformat").val(), $("#Dateformat").val()),
                        //"tagforsubmeter": $("#tagforsubmeter").val(),
                        "tagforsubmeter": $("#tagforsubmeter").prop("checked") ? 1 : 0,
                        "cmrisdeleted":"0",
                        "cmrparentmeterid": $("#parentcmrmeterid").val(),
                        "cmrcurrconnloadkw": $("#cmrcurrconnloadkw").val(),
                        "cmdcurrcontractdemandkva": $("#cmdcurrcontractdemandkva").val()
                    };


                    var RecordID = $("#cmrrecid").val();

                    $.ajax({
                        type: "PUT",
                        contentType: "application/json;charset=utf-8",//type of data to be send
                        //url: "http://localhost:8487/GridLogikViewerWebAPI/api/consumermeterrelation/" + RecordID,
                        url: BaseAddress + "consumermeterrelation/" + RecordID,
                        //crossDomain: true,
                        dataType: "json",//type of data to be received
                        data: JSON.stringify(mstconsumermeterrelation),//data to be send
                        success: function (response) {

                            if (response.Data.e == "S") {

                                if (response.Data.d.length > 0)

                                    alert(response.Data.d, '@Url.Action("Index", "ConsumerMeterRelation")', true, response.Data.e);
                              //  window.location.href = '@Url.Action("Index", "ConsumerMeterRelation")';
                            }
                            else if (response.Data.e == "M") {
                                if (response.Data.d.length > 0)

                                    alert(response.Data.d, '', false, response.Data.e);
                            }
                            else if (response.Data.e == "E") {
                                if (response.Data.d.length > 0)

                                    alert(response.Data.d, '', false, response.Data.e);
                            }
                        },
                        error: function (xhr, status, error) {

                            alert(xhr.responseText);
                        }
                    });
                }
                e.preventDefault();

            });
        });

        function ConvertMMDDYYYY(date) {
            var dateFormat = $("#Dateformat").val();
            var DateArr;
            if (date.indexOf("/") > 0) {
                while (date.indexOf("/") > 0) {
                    date = date.replace("/", "-");
                    dateFormat = dateFormat.replace("/", "-");
                }
            }
            if (dateFormat.toUpperCase() == "DD-MM-YY" || dateFormat.toUpperCase() == "DD-MM-YYYY") {
                DateArr = date.split('-');
                return DateArr[2] + "-" + DateArr[1] + "-" + DateArr[0];
            } else if (dateFormat.toUpperCase() == "MM-DD-YY" || dateFormat.toUpperCase() == "MM-DD-YYYY") {
                DateArr = date.split('-');
                return DateArr[2] + "-" + DateArr[0] + "-" + DateArr[1];
            } else if (dateFormat.toUpperCase() == "YY-MM-DD" || dateFormat.toUpperCase() == "YYYY-MM-DD") {
                DateArr = date.split('-');
                return DateArr[0] + "-" + DateArr[1] + "-" + DateArr[2];
            }
        }

        function dateCal(id1, id2, flag, id3) {
            var FrmDt = $('#' + id1).val();
            var ToDt = $('#' + id2).val();
            var msg = "";
            if (flag == "1") {
                msg = "Start  date cannot be greater than End date";
            }
            else if (flag == "2") {
                msg = "Service  Start  date cannot be greater than Service End date";
            } else if (flag == "3") {
                msg = "Start  date cannot be greater than Service Start date";
            }

            if (FrmDt != null && FrmDt != "" && ToDt != null && ToDt != "") {
                var convFrm = new Date(ConvertMMDDYYYY(FrmDt));
                var convTo = new Date(ConvertMMDDYYYY(ToDt));
                var perDay = 24 * 60 * 60 * 1000;
                var Cmp = (convTo.valueOf() - convFrm.valueOf()) / perDay;
                if (Cmp < 0) {
                    alert(msg, '', false, "M");
                    $('#' + id3).val('');
                    return false;
                }
                else {
                    return true;
                }
            } else {
                return true;
            }
        }
        function ServiceVl(id1, id2, flag, id3) {
            var FrmDt = $('#' + id1).val();
            var ToDt = $('#' + id2).val();
            var msg = "";
            if (ToDt != null && ToDt != "") {
                msg = "Please select Service End date";
                if (FrmDt == null || FrmDt == "") {
                    alert(msg, '', false, "M");
                    $('#' + id3).val('');
                    return false;
                }
            }
            return true;
        }
        function CheckParentMeter() {
            if ($("#tagforsubmeter").prop("checked")) {
                var Val = $("#parentcmrmeterid").val();
                if (Val == null || Val == "") {
                    alert('Please Select Parent Meter', '', false, "M");
                    return false;
                }
            }
            return true;
        }
        $('#tagforsubmeter').change(function () {
            if ($("#tagforsubmeter").prop("checked")) {
                $("#parentcmrmeterid").prop("disabled", false);
            } else {
                $("#parentcmrmeterid").val('');
                $("#parentcmrmeterid").prop("disabled", true);
            }
        });
        function ParentMeterChange() {
            var pMeter = $("#parentcmrmeterid").val();
            var Meter = $("#cmrmeterid").val();
            if (Meter == pMeter) {
               // alert('The Value of Parent Meter and Value of Meter Should not be Same.');
                alert('The Value of Parent Meter and Value of Meter Should not be Same.', '', false, "M");
                $("#parentcmrmeterid").val('');
                return false;
            }
            return true;
        }
        $("#cmrconsumermasterid").change(function () {
            //Fill Parent Meter DropDown
            var cmrId = $('#cmrconsumermasterid').val();
            var MeterId = $('#cmrmeterid').val();
            if (cmrId != null && cmrId != "" && MeterId != null && MeterId!="") {
                $("#parentcmrmeterid").empty();
                FillParentMeter(cmrId, MeterId);
            } else {
                $("#parentcmrmeterid").empty();
                var str1 = "";
                str1 = "<option value>Select Parent Meter</option>";
                $("#parentcmrmeterid").html(str1);
            }
        });
        $("#cmrmeterid").change(function () {
            //Fill Parent Meter DropDown
            var cmrId = $('#cmrconsumermasterid').val();
            var MeterId = $('#cmrmeterid').val();
            if (cmrId != null && cmrId != "" && MeterId != null && MeterId != "") {
                $("#parentcmrmeterid").empty();
                FillParentMeter(cmrId, MeterId);
            } else {
                $("#parentcmrmeterid").empty();
                var str1 = "";
                str1 = "<option value>Select Parent Meter</option>";
                $("#parentcmrmeterid").html(str1);
            }
        }); 
        function FillParentMeter(cmrId,meterId) {
            box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",
                //url: "http://localhost/GridLogikViewerWebAPI/api/meter",
                url: BaseAddress + "ConsumerMeterRelation/GetParentMeter/" + cmrId + "/" + meterId,
                dataType: "json",
                async: false,
                success: function (meters, status, jqXHR) {
                    var str1 = "";
                    //
                    str1 = "<option value>Select Parent Meter</option>";
                    if (meters.Data.result != undefined) {
                        var data = meters.Data.result;
                        for (var i in data) {
                            str1 += "<option value=" + data[i].id + ">" + data[i].metername + "</option>";
                        }
                    }
                    else if (meters.Data.e == "E") {
                        if (box) box.remove();
                        if (meters.Data.d.length > 0)

                            alert(meters.Data.d, '', false, "E");
                    }
                    $("#parentcmrmeterid").html(str1);
                    $(".meterclasses").selectpicker();
                    if (box) box.remove();
                }
            });
        }
    </script>
}
<section>
    <div id="main-content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <!--Top header start-->
                    @*<h3 class="ls-top-header">Assign Meter</h3>*@
                    <!--Top header end -->
                    <!--Top breadcrumb start -->
                    <ol class="breadcrumb">
                        <li><a href="#"><i class="fa fa-home"></i></a></li>
                        <li><a href="#">Configurations</a></li>
                        <li class="active">Assign Meter</li>
                    </ol>
                    <!--Top breadcrumb start -->
                    <!--Table Wrapper Start-->

                    <a class="btn btn-warning pull-right btn-sm" href='@Url.Action("Index")'><i class="fa fa-arrow-left"></i> Back To List</a>
                    <div class="clearfix"></div>
                    <hr />
                    <div class="panel panel-light-blue">
                        <div class="panel-heading">
                            <i class="fa fa-pencil-square-o"></i> <strong>EDIT</strong>
                        </div>
                        <div class="panel-body">
                            @using (Html.BeginForm())
                            {
                                @Html.AntiForgeryToken()
                                        @Html.ValidationSummary(true)
    <div class="form-group">
        <input id="Dateformat" type="hidden" />
        <input id="ServerDateformat" type="hidden" />
        <input type="hidden" id="DatabaseDateformat">
        @Html.HiddenFor(model => model.cmrrecid)
    </div>

    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.cmrconsumerid, null, "")
            @Html.TextBoxFor(model => model.cmrconsumerid, new { disabled = "disabled", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.cmrconsumerid)
    </div>

    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.cmrconsumermasterid, null, "")
            @Html.DropDownList("cmrconsumermasterid", Enumerable.Empty<SelectListItem>(), new { @disabled = "disabled", @class = "form-control", @data_live_search = "true", @data_live_search_style = "contains", @title = "Select Consumer" })
    </div>

    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.cmrmeterid, null, "")
            @Html.DropDownList("cmrmeterid", Enumerable.Empty<SelectListItem>(), new { @disabled = "disabled", @class = "form-control", @data_live_search = "true", @data_live_search_style = "contains", @title = "Select Meter" })
    </div>


    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.cmrrelationshipstartdate, null, "")
            @Html.TextBoxFor(model => model.cmrrelationshipstartdate, new { @class = "form-control", @onchange = "dateCal('cmrrelationshipstartdate','cmrrelationshipenddate','1','cmrrelationshipstartdate');", @readonly = "true" })
            @Html.ValidationMessageFor(model => model.cmrrelationshipstartdate)
    </div>

    <div class="form-group col-md-4" style="display:none">
        @Html.LabelForRequired(model => model.cmrrelationshipenddate, null, "")
            @Html.TextBoxFor(model => model.cmrrelationshipenddate, new { @class = "form-control", @onchange = "dateCal('cmrrelationshipstartdate','cmrrelationshipenddate','1','cmrrelationshipstartdate');", @readonly = "true" })
            @Html.ValidationMessageFor(model => model.cmrrelationshipenddate)
    </div>

    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.cmrservicestartdate, null, "")
            @Html.TextBoxFor(model => model.cmrservicestartdate, new { @class = "form-control", @onchange = "dateCal('cmrrelationshipstartdate','cmrrelationshipenddate','1','cmrrelationshipenddate');", @readonly = "true" })
            @Html.ValidationMessageFor(model => model.cmrservicestartdate)
    </div>

    <div class="form-group col-md-4" style="display:none">
        @Html.LabelForRequired(model => model.cmrserviceenddate, null, "")
            @Html.TextBoxFor(model => model.cmrserviceenddate, new { @class = "form-control", @onchange = "dateCal('cmrrelationshipstartdate','cmrrelationshipenddate','1','cmrrelationshipenddate');", @readonly = "true" })
            @Html.ValidationMessageFor(model => model.cmrserviceenddate)
    </div>
    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.tagforsubmeter, null, "")
            @Html.CheckBoxFor(model => model.tagforsubmeter, new { })
            @Html.ValidationMessageFor(model => model.tagforsubmeter)
    </div>
    <div class="clearfix"></div>
    <div class="form-group col-md-4">
        @Html.LabelForRequired(model => model.parentcmrmeterid, null, "")
            @Html.DropDownListFor(model => model.parentcmrmeterid, Enumerable.Empty<SelectListItem>(), new { @onchange = "ParentMeterChange();", @disabled = "disabled", @class = "form-control", @data_live_search = "true", @data_live_search_style = "contains", @title = "Select Parent Meter" })
            @Html.ValidationMessageFor(model => model.parentcmrmeterid)
    </div>
    <div class="form-group col-md-4">
        @Html.LabelFor(model => model.cmrcurrconnloadkw, new { @class = "" })
            @Html.TextBoxFor(model => model.cmrcurrconnloadkw, new { @placeholder = "0.00", @class = "form-control  decimal", @maxlength = "6" })
    </div>
    <div class="form-group col-md-4">
        @Html.LabelFor(model => model.cmdcurrcontractdemandkva, new { @class = "" })
            @Html.TextBoxFor(model => model.cmdcurrcontractdemandkva, new { @placeholder = "0.00", @class = "form-control  decimal", @maxlength = "6" })
    </div>
                                <div class="clearfix"></div>
    <div class="panel-footer col-md-12 text-center">
        <button id="btnUpdate" type="submit" class="btn btn-sm btn-success"><i class="fa fa-save"></i>&nbsp;&nbsp;Save</button>
        <button type="button" class="btn btn-sm btn-danger" id="btnReset"><i class="fa fa-undo"></i>&nbsp;&nbsp;Reset</button>
    </div>
                            }
                            </div>
                        </div>
                        </div>
                    </div>
                </div>
                    </div>
</section>
@Scripts.Render("~/bundles/jqueryval")
