@model GridLogikViewer.APIModels.Alarm

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())

{

    @Html.AntiForgeryToken()

    <div class="container">
        <div class="content">
            <div class="content-container">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class=" dashboard-panel-body-box">Alarm</div>
                        <div class="panel-actions  dashboard-panel-body-boxcontrols">
                            <a href="charts-flot.html#" class="btn-setting" data-toggle="modal" data-target="#ModalTable01"><i class="fa fa-eye"></i></a>
                            <a href="charts-flot.html#" class="btn-minimize"><i class="fa fa-chevron-up"></i></a>
                            <a href="charts-flot.html#" class="btn-close"><i class="fa fa-times"></i></a>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="select">Meter</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.MeterID, (IEnumerable<SelectListItem>)ViewBag.MeterID, "Select Meter", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.MeterID)
                            </div>
                        </div>
                        <br><br><br>
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="text-input">Alarm Name </label>
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.AlarmName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AlarmName)
                            </div>
                        </div>
                        <br><br><br>
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="textarea-input">Message</label>
                            <div class="col-md-9">
                                @Html.TextAreaFor(model => model.Message, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Message)
                            </div>
                        </div>
                        <br><br><br>
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="multiple-select">Multiple select</label>
                            <div class="col-md-9">
                                <a id="btnAdd" class="toggle btn btn-primary">AddAlarmCondition</a>
                                <table class="table table-bordered table-hover table-sortable" id="tab_logic">
                                    <thead>
                                        <tr>
                                            <th class="text-center">
                                                Parameter
                                            </th>
                                            <th class="text-center">
                                                Condition
                                            </th>
                                            <th class="text-center">
                                                Value
                                            </th>
                                            <th class="text-center">
                                                Condition
                                            </th>
                                            <th class="text-center" style="border-top: 1px solid #ffffff; border-right: 1px solid #ffffff;">
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr id='addr0' data-id="0" class="hidden">
                                            <td data-name="parameter">
                                                @Html.DropDownListFor(model => model.MeterID, (IEnumerable<SelectListItem>)ViewBag.InstanceParameterID, "Select Parameter", new { @id = "parameter0", @name = "parameter0", @class = "form-control" })
                                            </td>
                                            <td data-name="operator">
                                                @Html.DropDownList("select", new SelectList(ViewBag.Condition1List, "Value", "Text"), "select", new { @id = "operator", @name = "operator0", @class = "form-control" })
                                            </td>
                                            <td data-name="value">
                                                <input type="text" id="value0" name="value0" class="form-control" placeholder="Text">
                                                <span class="help-block"></span>
                                            </td>

                                            <td data-name="operator">
                                                @Html.DropDownList("select", new SelectList(ViewBag.Condition2List, "Value", "Text"), "select", new { @id = "operator", @name = "operator0", @class = "form-control" })
                                            </td>
                                            <td data-name="del">
                                                <button name="del0" class='btn btn-danger glyphicon glyphicon-remove row-remove'></button>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Create" class="btn btn-default" />
                                        <input type="button" value="Add Row" id="add_row" class="btn btn-default pull-right" />
                                    </div>
                                </div>
                            </div>

                        </div>
                       
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br>
    <br>
   
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@*<script src="~/Scripts/jquery-1.10.2.js"></script>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="~/Content/Template/js/jquery/jquery.min.js"></script>
<script src="~/Content/Template/js/jquery-1.10.1.min.js"></script>*@

<script type="text/javascript">

    $(document).ready(function () {



       
        //test
        $('#add_row').on('click', function () {
            // Dynamic Rows Code

            // Get max row id and set new id
            var newid = 0;
            $.each($("#tab_logic tr"), function () {
                if (parseInt($(this).data("id")) > newid) {
                    newid = parseInt($(this).data("id"));
                }
            });
            if (newid != 0 && ($("#Parameter" + newid).val() == "" ||

           $("#Condition" + newid).val() == "" || $("#Value" + newid).val() == "")) {
                setTimeout(function () {
                    alert("Please fill all the values in previous row");
                }, 1000);
            }
            else {
                newid++;
                var tr = $("<tr></tr>", {
                    id: "addr" + newid,
                    "data-id": newid
                });

                // loop through each td and create new elements with name of newid
                $.each($("#tab_logic tbody tr:nth(0) td"), function () {
                    var cur_td = $(this);

                    var children = cur_td.children();

                    // add new td and element if it has a nane
                    if ($(this).data("name") != undefined) {
                        var td = $("<td></td>", {
                            "data-name": $(cur_td).data("name")
                        });

                        var c = $(cur_td).find($(children[0]).prop('tagName')).clone().val("");
                        c.attr("name", $(cur_td).data("name") + newid);
                        c.attr("id", $(cur_td).data("name") + newid);
                        c.appendTo($(td));
                        td.appendTo($(tr));
                    } else {
                        var td = $("<td></td>", {
                            'text': $('#tab_logic tr').length
                        }).appendTo($(tr));
                    }
                });

                // add delete button and td
                /*
                $("<td></td>").append(
                    $("<button class='btn btn-danger glyphicon glyphicon-remove row-remove'></button>")
                        .click(function() {
                            $(this).closest("tr").remove();
                        })
                ).appendTo($(tr));
                */

                // add the new row
                $(tr).appendTo($('#tab_logic'));

                $(tr).find("td button.row-remove").on("click", function () {
                    $(this).closest("tr").remove();
                    $("#saveDetail").hide();
                });

                $("#saveDetail").show();
            }
        });

        $("#add_row").trigger("click");


       
    });
</script>
