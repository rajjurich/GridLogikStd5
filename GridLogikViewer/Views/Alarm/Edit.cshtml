@model GridLogikViewer.APIModels.Alarm

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
@using (Html.BeginForm("EditAlarm", "Alarm", FormMethod.Post, new { id = "formAlarmDetailsEdit" }))
{
    @Html.AntiForgeryToken()


    <div class="container">

        <div class="content">

            <div class="content-container">

                <!--dummy text-->

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class=" dashboard-panel-body-box">Form</div>
                        <div class="panel-actions  dashboard-panel-body-boxcontrols">
                            <a href="charts-flot.html#" class="btn-setting" data-toggle="modal" data-target="#ModalTable01"><i class="fa fa-eye"></i></a>
                            <a href="charts-flot.html#" class="btn-minimize"><i class="fa fa-chevron-up"></i></a>
                            <a href="charts-flot.html#" class="btn-close"><i class="fa fa-times"></i></a>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="select">Meter</label>
                            <div class="col-md-9">
                                @Html.DropDownList("MeterID", string.Empty)

                            </div>
                        </div>
                        <br><br><br>
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="text-input">Alarm Name </label>
                            <div class="col-md-9">

                                @Html.TextBoxFor(model => model.AlarmName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AlarmName)

                            </div>
                        </div>

                        <br><br><br>

                        <div class="form-group">
                            <label class="col-md-2 control-label" for="textarea-input">Message</label>
                            <div class="col-md-9">
                                @Html.TextAreaFor(model => model.Message, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Message)
                            </div>
                        </div>

                        <br><br><br>

                        <div class="form-group">

                            <label class="col-md-2 control-label" for="multiple-select">Multiple select</label>

                            <div class="col-md-9">
                                @Html.HiddenFor(model => Model.Id)
                                <a id="btnAddConditionEdit" class="toggle btn btn-primary">AddAlarmCondition</a>
                                <table class="table table-bordered table-hover table-sortable" id="tab_logicEdit">
                                    <thead>
                                        <tr>
                                            <th class="text-center">
                                                Parameter
                                            </th>
                                            <th class="text-center">
                                                Condition
                                            </th>
                                            <th class="text-center">
                                                Value
                                            </th>                                            
                                            <th class="text-center" style="border-top: 1px solid #ffffff; border-right: 1px solid #ffffff;">
                                            </th>
                                        </tr>
                                    </thead>
                                    @for (int i = 0; i < Model.AlarmConditions.Count(); i++)
                                    {
                                        @Html.HiddenFor(model => Model.AlarmConditions[i].AlarmId, new { @id = "alarmId" })
                                        @Html.HiddenFor(model => Model.AlarmConditions[i].Id, new { @id = "alarmConditionId" + (i + 1) })                                        
                                        <tr id='addr0' data-id="0">
                                            <td data-name="parameter">
                                                @Html.DropDownListFor(model => Model.AlarmConditions[i].Parameter, new SelectList((IEnumerable<SelectListItem>)ViewBag.InstanceParameterID, "Value", "Text", Model.AlarmConditions[i].Parameter), "Select Parameter", new { @id = "parameter0", @name = "parameter0", @class = "form-control" })
                                            </td>
                                            <td data-name="operator">
                                                @Html.DropDownListFor(model => Model.AlarmConditions[i].Operator, new SelectList(ViewBag.Condition1List, "Value", "Text", Model.AlarmConditions[i].Operator), "select", new { @id = "operator", @name = "operator0", @class = "form-control" })
                                            </td>
                                            <td data-name="value">
                                                @Html.TextBoxFor(model => Model.AlarmConditions[i].Value, new { @id = "value" + (i + 1), name = "value0" + (i + 1), @class = "form-control" })
                                                <span class="help-block"></span>
                                            </td>
                                            <td data-name="del">
                                                <button type="button" name="del0" id=@Model.AlarmConditions[i].Id class='btn btn-danger glyphicon glyphicon-remove row-remove' onclick="RemoveAlarmCondition(this)"></button>
                                            </td>
                                        </tr>
                                    }
                                </table>                              
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="button" id="btnSave" value="Save" class="btn btn-default" />
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <!--dummy text-->
            </div>
        </div> <!-- /.content -->
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script src="~/Content/Template/js/jquery/jquery-2.1.4.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $("#btnAddConditionEdit").on("click", function () {
            // Dynamic Rows Code
            var rowCount = $('#tab_logicEdit tr').length;

            // Get max row id and set new id
            var newid = rowCount - 1;
            $.each($("#tab_logicEdit tr"), function () {
                if (parseInt($(this).data("id")) > newid) {
                    newid = parseInt($(this).data("id"));
                }
            });

            if (newid != 0 && ($("#address" + newid).val() == "" || $("#parameter" + newid).val() == "" || $("#MultiplicationFactor" + newid).val() == "" ||
                $("#InstanceData_Meter_Name" + newid).val() == "" || $("#dataType" + newid).val() == "")) {
                setTimeout(function () {
                    alert("Please fill all the values in previous row");
                }, 1000);
            }
            else {
                newid++;
                var tr = $("<tr></tr>", {
                    id: "addr" + newid,
                    "data-id": newid
                });

                // loop through each td and create new elements with name of newid
                $.each($("#tab_logicEdit tbody tr:nth(0) td"), function () {
                    var cur_td = $(this);

                    var children = cur_td.children();

                    // add new td and element if it has a nane
                    if ($(this).data("name") != undefined) {
                        var td = $("<td></td>", {
                            "data-name": $(cur_td).data("id")
                        });

                        var c = $(cur_td).find($(children[0]).prop('tagName')).clone().val("");
                        c.attr("name", $(cur_td).data("name") + newid);
                        c.attr("id", $(cur_td).data("name") + newid);
                        c.appendTo($(td));
                        td.appendTo($(tr));
                    } else {
                        var td = $("<td></td>", {
                            'text': $('#tab_logicEdit tr').length
                        }).appendTo($(tr));
                    }
                });

                // add the new row
                $(tr).appendTo($('#tab_logicEdit'));

                $(tr).find("td button.row-remove").on("click", function () {
                    $(this).closest("tr").remove();
                    $("#saveDetailEdit").hide();
                });

                $("#saveDetailEdit").show();
            }
        });

        $("#btnSave").on("click", function () {
            var form = $("#formAlarmDetailsEdit").serialize();
            $.ajax({
                type: 'POST',
                url: "/Alarm/Edit",
                data: form,
                dataType: 'json',
                success: function (data) {
                    if (data.error) {
                        alert(data.message);
                    }
                    if (data.success) {
                        alert(data.message);
                        window.location.href = "/DriverConfiguration/Index";
                    }
                }
            });
        });        
    });
    function RemoveAlarmCondition(obj) {
        $("#" + obj.id).closest("tr").remove();
    }

</script>
