@model GridLogikViewer.APIModels.InputData
@using GridLogikViewer.Extensions
@{
    ViewBag.Title = "Add Input Data";
}
<section>
    <div id="main-content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <!--Top header start-->
                    @*<h3 class="ls-top-header">Employee</h3>*@
                    <!--Top header end -->
                    <!--Top breadcrumb start -->
                    <ol class="breadcrumb">
                        <li><a href="#"><i class="fa fa-home"></i></a></li>
                        <li><a href="#">Masters</a></li>
                        <li class="active">Input Data</li>
                    </ol>
                    <!--Top breadcrumb start -->
                    <div class="row">
                        <div class="col-md-12">
                            <!--Table Wrapper Start-->
                            <a class="btn btn-warning pull-right btn-sm" href='@Url.Action("Index")'><i class="fa fa-arrow-left"></i> Back To List</a>
                            <div class="clearfix"></div>
                            <hr />
                            <div class="panel panel-light-blue">
                                <div class="panel-heading">
                                    <i class="fa fa-plus-circle"></i>  <strong>ADD</strong>
                                </div>
                                <div class="panel-body">
                                    @using (Html.BeginForm("Save", "InputData", FormMethod.Post, new { id = "addInputData" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.ValidationSummary(true)
                                        <div class="panel-body">
                                            <div class="table-responsive">
                                                <div class="form-group  col-md-12" style="border:0px solid #000;">
                                                    <label class="col-md-6 control-label">Select Input Data Type :</label>
                                                    <div class="col-md-6" style="border:0px solid #000;">
                                                        <label class="checkbox-inline" for="inline-checkbox1">
                                                            @Html.RadioButton("RadioInputData", "Constant", true)
                                                            @Html.Label("Constant")
                                                        </label>
                                                        <label class="checkbox-inline" for="inline-checkbox2">
                                                            @Html.RadioButton("RadioInputData", "RealTimeDerived")
                                                            @Html.Label("RealTime Derived")
                                                        </label>

                                                    </div>
                                                    <hr />
                                                </div>

                                                <div class="form-group  col-md-12" style="border:0px solid #000;">
                                                    @*<label class="col-md-6 control-label" for="text-input">Enter Name<label class="validation-redcolor">*</label></label>*@
                                                    @Html.LabelForRequired(model => model.ParaName, null, "control-label col-md-6")
                                                    <div class="col-md-6">
                                                        @*  <input type="text" id="text-input" name="text-input" class="form-control" placeholder="Text">*@
                                                        @Html.TextBoxFor(m => m.ParaName, new { @maxlength = "50", @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ParaName, null, new { @class = "validation-redcolor" })
                                                    </div>
                                                </div>


                                                <div class="form-group  col-md-12" style="border:0px solid #000;">
                                                    @*<label class="col-md-6 control-label" for="text-input">Enter Value<label class="validation-redcolor">*</label></label>*@
                                                    @Html.LabelForRequired(model => model.ParaValue, null, "control-label col-md-6")
                                                    <div class="col-md-6">
                                                        @*<input type="text" id="text-input" name="text-input" class="form-control" placeholder="Text">*@
                                                        @Html.TextBoxFor(m => m.ParaValue, new { id = "numberParaValue", @maxlength = "10", @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ParaValue, null, new { @class = "validation-redcolor" })
                                                    </div>
                                                </div>

                                            </div>

                                        </div>
                                        <div class="panel-footer col-md-12 text-center">
                                            <button type="submit" id="saveInputdata" class="btn btn-success"><i class="fa fa-floppy-o"></i> Save</button>
                                            <button type="reset" class="btn btn-danger" id="btnReset"><i class="fa fa-undo"></i>&nbsp;&nbsp;Reset</button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    var box;
    $(document).ready(function () {
        new confirmexitmsg('form');
    });
    $(document).on("keypress", "#numberParaValue", function (e) {
        //if the letter is not digit then display error and don't type anything
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            //display error message
            setTimeout(function () {
                alert("Only Numbers are allow", '', false, 'E')
            }, 0);
            return false;
        }
    });
    $("#btnBack").click(function () {
        box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
        window.location.href = '@Url.Action("Index", "InputData")';
    });
    $(':radio[name=RadioInputData]').change(function () {
        var selectedVal = $("input[name=RadioInputData]:checked").val();
        if (selectedVal == "Constant")
            $("#realTimeBox").hide();
        else if (selectedVal == "RealTimeDerived") {
            window.location.href = '@Url.Action("AddRealTimeData", "InputData")';
        }
    });

    $("#shiftright").click(function () {
        $('#ddlmeter option:selected').appendTo("#ddlmeterselect")
        $("#ddlmeterselect option").prop("selected", true);
    })

    $("#shiftleft").click(function () {
        $('#ddlmeterselect option:selected').appendTo("#ddlmeter")
    })

    $("#shiftrightall").click(function () {
        $('#ddlmeter option').appendTo("#ddlmeterselect")
        $("#ddlmeterselect option").prop("selected", true);
    })

    $("#shiftleftall").click(function () {
        $('#ddlmeterselect option').appendTo("#ddlmeter")
    })

    $(".btn-default").click(function () { $("#ddlmeterselect option").prop("selected", true); })
</script>
