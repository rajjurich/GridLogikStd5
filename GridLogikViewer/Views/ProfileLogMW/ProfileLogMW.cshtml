@model GridLogikViewer.ViewModel.ProfileLogViewModel
@using GridLogikViewer.Extensions
@{
    ViewBag.Title = "Profile Log";
}
<style>
    .highlighted {
        background-color: #999;
    }
    .dataTables_scrollHead {
        overflow: visible !important;
    }

    .dataTables_scroll {
        overflow-y: scroll !important;
        margin-bottom: 15px;
    }

    .dataTables_info {
        margin-top: 0 !important;
        padding-top: 0 !important;
    }
    div.dt-buttons {
        position: absolute;
        float: left;
        bottom: -92px;
        left: 227px;
    }

    .dt-buttons .buttons-pdf {
        color: #fff;
        background-color: #d2322d !important;
        background-image: none !important;
        border-color: #ac2925;
        border: 1px solid transparent;
        white-space: nowrap;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        border-radius: 0px;
    }
</style>
@using (Html.BeginForm("Update", "ProfileLogMW", FormMethod.Post, new { id = "formProfileLog" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Group_Name)
    @Html.HiddenFor(m => m.Meter_Name)
    @Html.HiddenFor(m => m.ColumnValue)
    @Html.HiddenFor(m => m.SelectedColumnOrder)
    <section>
        <div id="main-content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        @*<div class="panel-heading">
                            <div class=" dashboard-panel-body-box"></div>
                            <div class="panel-actions  dashboard-panel-body-boxcontrols">
                            </div>
                        </div>*@
                        @*<h3 class="ls-top-header col-md-6">
                                Energy Log
                            </h3>*@
                        <!--Top breadcrumb start -->
                        <ol class="breadcrumb col-md-12 text-left bgn">
                            <li><a href="#"><i class="fa fa-home"></i></a></li>
                            <li><a href="#">Logs</a></li>
                            <li class="active">Profile Log</li>
                        </ol>
                        <!--Top breadcrumb start -->
                        <div class="clearfix"></div>
                        <div class="row  mb55">
                            <div class="col-md-12">

                                <!--Table Wrapper Start-->


                                <hr />
                                <div class="panel panel-light-blue">
                                    <div class="panel-body">
                                        <div id="dvSelectionFilters">
                                            <div class="row mb5">
                                                <div class="col-md-5">
                                                    <div class="row mt20">
                                                        @*<label class="col-md-4 control-label" style="border:0px solid #000; padding:0px; margin:5px 0px;" for="select">Meter Group<label class="validation-redcolor">*</label></label>*@
                                                        <div class="col-md-4 text-right">
                                                            @Html.LabelForRequired(model => model.GroupId, null, "col-md-4 control-label")
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.DropDownListFor(model => Model.GroupId, new SelectList(Model.Groups, "ID", "GroupName"), "select", new { @id = "groupList", @class = "form-control", @size = "1" })
                                                            @Html.ValidationMessageFor(model => Model.GroupId, null, new { @class = "validation-redcolor" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="row mt20">
                                                        @*<label class="col-md-4 control-label" style="border:0px solid #000; padding:0px; margin:5px 0px;" for="select">Meter Name<label class="validation-redcolor">*</label></label>*@
                                                        <div class="col-md-4 text-right">
                                                            @Html.LabelForRequired(model => model.MeterId, null, "col-md-4 control-label")
                                                            </div>
                                                        <div class="col-md-8">
                                                            @Html.DropDownListFor(model => Model.MeterId, new SelectList(Enumerable.Empty<SelectListItem>(), "ID", "MeterName"), "select", new { @id = "meterList", @class = "form-control", @size = "1" })
                                                            @Html.ValidationMessageFor(model => Model.MeterId, null, new { @class = "validation-redcolor" })
                                                        </div>
                                                        </div>
                                                    </div>
                                                <div class="col-md-2 mt20">
                                                    <button type="submit" class="btn btn-danger" id="updateDetail" style="font-weight:bold;  margin:0px 10px;">Update Now</button>
                                                </div>
                                                </div>
                                                @*//new control starts here*@
                                            <div class="col-md-6 col-centered">
                                                
                                                <div class="form-group col-md-5">
                                                    @Html.Label("Parameters", new { @class = "header" })
                                                    <div id='columnSelection' class="form-group col-md-4">
                                                    </div>
                                                </div>
                                                <div class="form-group col-md-5">
                                                    @Html.Label("Selection", new { @class = "header" })
                                                    <div id='selectedColumn' class="form-group col-md-4">
                                                    </div>
                                                </div>
                                            </div>
                                                @*end*@
                                            <div class="clearfix"></div>
                                            <hr />
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="form-group row">
                                                        <div class="col-md-8">
                                                            <label>From Date</label>
                                                            <div id="dtFrmDate">
                                                                @Html.TextBoxFor(m => m.FromDate, new { @id = "FromDate", @class = "form-control", @readonly = true, @name = "txtFrmDate" })
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <label>Time</label>
                                                            @Html.DropDownListFor(model => Model.StartTime, new SelectList(Model.StartTimeList), "select", new { @id = "startTime", @class = "col-md-12 form-control", @size = "1" })
                                                        </div>
                                                    </div>
                                                </div>



                                                <div class="col-md-4">
                                                    <div class="form-group row">

                                                        <div class="col-md-8">
                                                                <label>To Date</label>
                                                            <div id="dtToDate">
                                                                @Html.TextBoxFor(m => m.ToDate, new { @id = "ToDate", @class = "form-control", @readonly = true, @name = "txtToDate" })
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                                <label>Time</label>
                                                                @Html.DropDownListFor(model => Model.EndTime, new SelectList(Model.EndTimeList), "select", new { @id = "endTime", @class = "form-control", @size = "1" })
                                                        </div>
                                                    </div>
                                                    </div>


                                                <div class="col-md-3 col-sm-12">
                                                        <label>Select Interval</label>
                                                        <select id="ddlInterval" name="Interval" tabindex="1" data-placeholder="Select here.." class="col-lg-12 form-control col-sm-12" style="padding-right:0px;">
                                                            <option value="H">Hour Wise</option>
                                                            <option value="B">Block Wise</option>
                                                        </select>
                                                </div>
                                                </div>
                                                <div class="clearfix"></div>
                                            </div>
                                        @if (ViewBag.RecordCount == "true")
            {
            <div id="displayData">
                <button id="btnBack" type="button" class="btn btn-warning pull-right btn-sm"><i class="fa fa-arrow-left"></i>&nbsp;&nbsp;Back</button>
                <div class="clearfix"></div>
                <hr />
                <div class="form-group row">
                    <div class="col-md-3">
                        <label>Meter Group</label>&nbsp;&nbsp;
                        @Html.DisplayFor(model => model.Group_Name)
                    </div>
                    <div class="col-md-3">
                        <label for="ccyear">Meter Name</label>&nbsp;&nbsp;
                        <label id="lblmetername">@Html.DisplayFor(model => model.Meter_Name)</label>
                    </div>
                    <div class="col-md-3">
                        <label for="ccyear">From date</label>&nbsp;&nbsp;&nbsp;
                        <label id="lblfromdate">@Html.DisplayFor(model => model.fltrFromDate)</label>
                    </div>
                    <div class="col-md-3">
                        <label>To date</label>&nbsp;&nbsp;&nbsp;
                        <label id="lbltodate">@Html.DisplayFor(model => model.fltrToDate)</label>
                    </div>
                </div>
                <div id="dvData">
                    <table id="tableProfileLog" class="table table-striped">
                        <thead>
                            <tr>
                                <th class="tableth">
                                    @Html.Label("Date-Time")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VLL")
                                </th>
                                <th class="tableth">
                                    @Html.Label("I")
                                </th>
                                <th class="tableth">
                                    @Html.Label("PF")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MW")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MVA")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MVAR")
                                </th>
                                <th class="tableth">
                                    @Html.Label("HZ")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VRY")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VYB")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VBR")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VRN")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VYN")
                                </th>
                                <th class="tableth">
                                    @Html.Label("VBN")
                                </th>

                                <th class="tableth">
                                    @Html.Label("VLN")
                                </th>
                                <th class="tableth">
                                    @Html.Label("IR")
                                </th>
                                <th class="tableth">
                                    @Html.Label("IY")
                                </th>
                                <th class="tableth">
                                    @Html.Label("IB")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MWR")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MWY")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MWB")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MVAY")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MVAB")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MW-DEMAND")
                                </th>
                                <th class="tableth">
                                    @Html.Label("MVA-DEMAND")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.LoadServiceList)
                            {
                                <tr>
                                    <td>
                                        <b>@item.Date.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vll.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.i.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.pf.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kw.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kva.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kvar.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.hz.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vry.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vyb.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vbr.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vrn.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vyn.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.vbn.ToString()</b>
                                    </td>

                                    <td>
                                        <b>@item.vln.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.ir.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.iy.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.ib.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kwr.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kwy.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kwb.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kvay.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kvab.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kw_demand.ToString()</b>
                                    </td>
                                    <td>
                                        <b>@item.kva_demand.ToString()</b>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="colorstrip">
                        @Html.Label("Sum :")
                        @Html.Label("Sum", new { id = "Sum" })
                        <span>&nbsp;&nbsp;&nbsp;</span>
                        @Html.Label("Avg :")
                        @Html.Label("Avg", new { id = "average" })
                        <span>&nbsp;&nbsp;&nbsp;</span>
                        @Html.Label("Min :")
                        @Html.Label("Min", new { id = "Minimum" })
                        <span>&nbsp;&nbsp;&nbsp;</span>
                        @Html.Label("Max :")
                        @Html.Label("Max", new { id = "Maximum" })
                    </div>
                </div>
                <div id="chart_dialog" style="width:675px;">
                    <span>
                        <div class="col-lg-12" style="border:0px solid #000; padding:0px; margin:0px 10px;">
                            @*<div class="form-group col-md-3" style="border:0px solid #f00;">
                                    <label for="ccyear" style="border:0px solid #f00; margin:5px 0px;">Meter Name</label>&nbsp;&nbsp;
                                    @Html.DisplayFor(model => model.Meter_Name)
                                </div>
                                <div class="form-group col-md-3" style="border:0px solid #f00;">
                                    <label for="ccyear" style="border:0px solid #f00; margin:5px 0px;">From date</label>&nbsp;&nbsp;&nbsp;
                                    @Html.DisplayFor(model => model.fltrFromDate)
                                </div>
                                <div class="form-group col-md-3" style="border:0px solid #f00;">
                                    <label for="ccyear" style="border:0px solid #f00; margin:5px 0px;">To date</label>&nbsp;&nbsp;&nbsp;
                                    @Html.DisplayFor(model => model.fltrToDate)
                                </div>*@
                            <a href="javascript:printDiv('chart_container')" class="btn btn-default btn-sm pull-right">Print</a>
                        </div>

                    </span>

                    <div id="chart_container" style="width:100%; clear:both; max-width:1247px;">
                        <div class="col-lg-12" style="border:0px solid #000; padding:0px; margin:0px 10px;">

                        </div>

                    </div>
                </div>
                <div class="mt20">
                    <button type="button" class="btn btn-success" id="export"><i class="fa fa-file-excel-o"></i> Export to Excel</button>
                    <button type="button" class="btn btn-twitter" id="graph"><i class="fa fa-bar-chart-o"></i> Graph</button>
                </div>
            </div>
            }

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
<style>
    .ui-datepicker {
        z-index: 10000000 !important;
    }

    .highlighted {
        background-color: #999;
    }

    .scroller-wrap {
        overflow-x: auto;
        overflow-y: hidden;
        position: relative;
        margin: 3em 0;
        width: 100%;
    }

    .colorstrip {
        .ui-dialog; {
        z-index: 1111;
        position: fixed;
        top: 10%;
        left: 10%;
    }

    .ui-widget-overlay {
        z-index: 1111;
    }
</style>
<link href="~/Content/css/jqx.base.css" rel="stylesheet" />
<script src="~/Scripts/jqxcore.js"></script>
<script src="~/Scripts/jqxcore.js"></script>
<script src="~/Scripts/jqxbuttons.js"></script>
<script src="~/Scripts/jqxlistbox.js"></script>
<script src="~/Scripts/jqxscrollbar.js"></script>
<script src="~/Scripts/jqxdragdrop.js"></script>
@*<script src="~/Scripts/dataTables.colReorder.js"></script>*@
<script src="~/Scripts/jquery-confirm.js"></script>
<script src="/GridLogikViewer/Scripts/jquery.validate.js"></script>
<script src="/GridLogikViewer/Scripts/jquery.validate.unobtrusive.js"></script>

<script src="~/Scripts/Datatablejs/jquery.dataTables.min.js"></script>
<script src="~/Scripts/Datatablejs/dataTables.buttons.min.js"></script>
<script src="~/Scripts/Datatablejs/jszip.min.js"></script>
<script src="~/Scripts/Datatablejs/pdfmake.min.js"></script>
<script src="~/Scripts/Datatablejs/vfs_fonts.js"></script>
<script src="~/Scripts/Datatablejs/buttons.html5.min.js"></script>
<script type="text/javascript">
    var box;
    var FinalColumns = [];
    var FinalSelectedColumn = [];
    var UnSelectedColumns = [];
    var itemsParent = [];
    var items = [];
    $(document).ready(function () {
        //new code
        if ('@ViewBag.RecordCount' == "false")
            $("#export, #graph").hide();

        $(document).on("contextmenu", function (e) {
            e.preventDefault();
        });
        $('body #tableProfileLog thead th').mousedown(function (event) {
            switch (event.which) {
                case 1:
                    //console.log('Left Mouse button pressed.');
                    break;
                case 2:
                    //console.log('Middle Mouse button pressed.');
                    break;
                case 3:
                    // $("#tableProfileLog td").removeClass("highlighted");

                    var index = $(this).index() + 1;
                    var rowindex = 1;
                    if (index > 1) {

                        $('#tableProfileLog tr').eq(rowindex).find('td').eq(index - 1).trigger('mousedown');
                        $("#tableProfileLog  tr td:nth-child(" + index + ")").each(function (i, obj) {
                            //console.log($(obj).text());
                            $(obj).trigger('mouseover');
                        });

                    }


                    return false; // prevent text selection
                    break;
                default:
                    //console.log('You have a strange Mouse!');
            }
        });


        if ('@ViewBag.RecordCount' == 'true') {
            FinalColumns = $("#ColumnValue").val().split(',');
            itemsParent = $("#SelectedColumnOrder").val().split(',');
            var modifiedItemParent = ["VLL", "I", "PF", "MW", "MVA", "MVAR", "HZ", "VRY", "VYB", "VBR", "VRN", "VYN", "VBN", "VLN", "IR", "IY", "IB", "MWR", "MWY", "MWB", "MVAY", "MVAB", "MW-DEMAND", "MVA-DEMAND"];
            var orderSelection = [0];
            for (var i = 0; i < itemsParent.length; i++) {
                var strtext = itemsParent[i].toString();
                if ($.inArray(strtext, FinalColumns) == -1) {
                    var ind = $("#tableProfileLog").find("th:contains('" + modifiedItemParent[i] + "')").index() + 1;
                    $('td:nth-child(' + ind + '),th:nth-child(' + ind + ')').hide();
                }
            }
            for (var counter = 0; counter < FinalColumns.length; counter++) {
                var index = $.inArray(FinalColumns[counter], itemsParent);
                orderSelection.push(index + 1);
            }
            for (var j = 0; j <= itemsParent.length; j++) {
                if ($.inArray(j, orderSelection) == -1)
                    orderSelection.push(j);
            }

            $("#tableProfileLog").dataTable(
                {
                    dom: 'lBfrtip',
                    "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],
                    buttons: [
                        'pdfHtml5'
                    ],
                    pageLength: 10,
                    scrollX: true,
                    colReorder: {
                        order: orderSelection
                    }
                });
            var table = $('#tableProfileLog').DataTable();
            //new $.fn.dataTable.ColReorder(table);
            $("#dvSelectionFilters").hide();
        }

        $("#chart_dialog").dialog({
            autoOpen: false,
            resizable: false,
            height: 675,
            width: '85%',
            show: { effect: 'drop', direction: "up" },
            modal: true,
            draggable: true,
            open: function (event, ui) {
            },
        });
        var valueArr = [];
        var dateArr = [];
        var columnHeader = [];
        $(document).mousedown(function () {
            $("#tableProfileLog td").removeClass("highlighted");
            $("#average").text('Avg');
            $('#Maximum').text('Max');
            $('#Minimum').text('Min');
            $("#Sum").text('Sum');
            seriesArr = [];
            valueArr = [];
            dateArr = [];
            columnHeader = [];
        });
        var isMouseDown = false, isHighlighted;
        var a = 0;
        var current = 0;
        var previous = 0;
        var counter = 1;
        $(document).on('mousedown', '#tableProfileLog td', function () {
            $("#tableProfileLog td").removeClass("highlighted");
            isMouseDown = true;
            if (currentIndex != 0)
                $(this).addClass("highlighted");
            if (currentIndex != 0) {
                if (!isNaN(Number($(this).text()))) {
                    a = Number(a) + Number($(this).text());
                    $('#Minimum,#Maximum,#Sum,#average').text(a);

                    var $th = $(this).closest('table').find('th').eq($(this).index());
                    columnHeader.push($th[0].textContent.trim());
                    valueArr.push($th[0].textContent.trim() + '_' + Number($(this).text()));
                    var date = $(this).closest("tr").find("td:nth-child(1)").text()
                    dateArr.push(date);
                }
            }
            isHighlighted = $(this).hasClass("highlighted");
            return false; // prevent text selection
        }).on('mouseover', '#tableProfileLog td', function () {
            currentIndex = $(this).index();
            if (isMouseDown) {
                if (!$(this).hasClass("highlighted") && currentIndex != 0) {

                    if (!isNaN(Number($(this).text()))) {
                        var date1 = $(this).closest("tr").find("td:nth-child(1)").text()
                        dateArr.push(date1);
                        //valueArr.push(Number($(this).text()));
                        a = Number(a) + Number($(this).text());
                        var $th = $(this).closest('table').find('th').eq($(this).index());
                        columnHeader.push($th[0].textContent.trim());
                        valueArr.push($th[0].textContent.trim() + '_' + Number($(this).text()));
                        if (Number($('#Minimum').text()) < Number($(this).text())) {
                            if (Number($('#Maximum').text()) < Number($(this).text())) {
                                $('#Maximum').text(Number($(this).text()));
                            }
                        }
                        else {
                            $('#Minimum').text(Number($(this).text()));
                        }
                    }
                    else {
                        valueArr.push(Number(0));
                        var date1 = $(this).closest("tr").find("td:nth-child(1)").text()
                        dateArr.push(date2);
                        var $th = $(this).closest('table').find('th').eq($(this).index());
                        columnHeader.push($th[0].textContent.trim());
                        valueArr.push($th[0].textContent.trim() + '_' + Number($(this).text()));
                    }
                    counter = counter + 1;
                    $("#Sum").text(Number(a).toFixed(2));
                    $("#average").text((a / counter).toFixed(2));
                }
                if (currentIndex != 0)
                    $(this).toggleClass("highlighted", isHighlighted);
            }
        });

        $(document)
          .mouseup(function () {
              isMouseDown = false;
              a = 0;
              counter = 1;
          });

        var seriesArr = [];
        var addedHeaders = [];

        $("#graph").mousedown(function () {
            var valuesArrs = [];
            var SelcolDates = [];
            var columnList = [];
            var SelcolumnList = [];
            var tblname = "#tableProfileLog";
            var TableRow = $('table' + tblname).find('tbody').find('tr');
            //$(tblname + ' thead th').each(function (index) {
            //    columnList.push($(this).text().trim());
            //});
            columnList = $("#SelectedColumnOrder").val().split(',');
            for (var i = 0; i < TableRow.length; i++) {
                var Tdcount = 0;
                for (var j = 0; j < TableRow[i].cells.length; j++) {
                    var subtd = TableRow[i].cells[j].className;
                    if (subtd.includes("highlighted")) {
                        var colName = columnList[j];
                        SelcolumnList.push(colName);
                        var Vl = TableRow[i].cells[j].innerText;
                        valuesArrs.push(colName + "$" + Vl);
                        if (Tdcount == 0) {
                            var dat = TableRow[i].cells[0].innerText;
                            SelcolDates.push(dat);
                        }
                        Tdcount++;
                    }
                }
            }
            var values = [];
            $.each(valuesArrs, function (key, value) {
                if (value != 0) {
                    var dataArray = value.split("$");
                    var seriesOptions2 = [];
                    seriesOptions2.push(dataArray[dataArray.length - 1]);
                    if (values.length > 0) {
                        $.each(values, function (key1, value1) {
                            if ((values[key1].name != dataArray[0]) && ($.inArray(dataArray[0], addedHeaders) == -1)) {
                                var series = { name: dataArray[0], data: seriesOptions2 }
                                values.push(series);
                                addedHeaders.push(dataArray[0]);
                            }
                            else if (values[key1].name == dataArray[0]) {
                                values[key1].data.push(dataArray[dataArray.length - 1]);
                            }
                        });
                    }
                    else {
                        var series = { name: dataArray[0], data: seriesOptions2 }
                        values.push(series);
                    }
                }
            });

            addedHeaders = [];
            var uniquecolumnHeader = SelcolumnList.filter(function (itm, i, SelcolumnList) {
                return i ==SelcolumnList.indexOf(itm);
            });

            var sortedCol = $(tblname).dataTable().fnSettings().aaSorting[0][0];
            var sortedDir = $(tblname).dataTable().fnSettings().aaSorting[0][1];
            var str = $(tblname).dataTable().fnSettings().aoColumns[sortedCol].sTitle;
            if (str.toLowerCase().indexOf("date") >= 0 && sortedDir.toLowerCase() == 'desc') {
                SelcolDates = SelcolDates.reverse();//change for date desc
            }

            if (uniquecolumnHeader.length > 0) {
                box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
                for (var ser = 0; ser < uniquecolumnHeader.length; ser++) {
                    var seriesOptions2 = values[ser].data.map(Number);    ////convert String Array into Number Array
                    if (str.toLowerCase().indexOf("date") >= 0 && sortedDir.toLowerCase() == 'desc') {
                        seriesOptions2 = seriesOptions2.reverse();  //change for date desc
                    }
                    var dataArr = [];
                    for (var hdr = 0; hdr < seriesOptions2.length; hdr++) {
                        var dts = ConvertYYYYMMDDHHmmss(SelcolDates[hdr]);
                        var data = [Date.UTC(dts[0], dts[1], dts[2], dts[3], dts[4], dts[5]), seriesOptions2[hdr]];
                        dataArr.push(data);
                    }
                    var series = { name: uniquecolumnHeader[ser], data: dataArr }; //Create Series Array with name and data property
                    seriesArr.push(series);
                }
                var metername = $('#lblmetername').text();
                var fromdate = $('#lblfromdate').text();
                var todate = $('#lbltodate').text();
                lineChart(SelcolDates, seriesArr, metername, fromdate, todate);
                seriesArr = [];
                valueArr = [];
                index = [];
                valuesArrs = [];
                SelcolDates = [];
                columnList = [];
                SelcolumnList = [];
                $("#chart_dialog").dialog('open');
                if (box) box.remove();
            }
            else {
                alert("Please select atleast one value", '', false, 'E')
            }
        });

        $('#export').mousedown(function () {
            box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
            var cols = $("#ColumnValue").val();
            cols = "Date," + cols;
            var expcols = exportAllColumns;
         //   console.log(expcols );
            window.location.href = '@Url.Action("Export", "ProfileLog")/?id='+ cols + "&exportAllColumns=" + exportAllColumns + "";
            if (box) box.remove();
        });
        

        $(".grpData").hide();
        var columns = ["VLL", "I", "PF", "KW", "KVA", "KVAR", "HZ", "VRY", "VYB", "VBR", "VRN", "VYN", "VBN", "VLN", "IR", "IY",
                       "IB", "KWR", "KWY", "KWB", "KVAY", "KVAB", "KW-DEMAND", "KVA-DEMAND"];
        var selectColumn = [];
        $("#columnSelection").jqxListBox({ allowDrop: false, allowDrag: false, source: columns, multiple: true, width: 200, height: 250 });
        var displaySelectedItems = function () {
            var items = $("#columnSelection").jqxListBox('getSelectedItems');
            for (var i = 0; i < items.length; i++) {
                selectColumn.push(items[i].label);
            }

            $("#selectedColumn").jqxListBox({
                allowDrop: true, allowDrag: true, enableSelection: false, source: selectColumn, multiple: true, width: 200, height: 250,
                renderer: function (index, label, value) {
                    return "<span>" + label + "</span> <a id='deleteLink" + index + "' class='text-danger pull-right'><i class='fa fa-times'></i></a>";
                }
            });
            var allItems = $("#selectedColumn").jqxListBox('getItems');
            for (var i = 0; i < allItems.length; i++) {
                $("#selectedColumn").jqxListBox('selectIndex', i);
            }
            selectColumn = [];
        }
        var removeSelectedItems = function (finText) {
            selectColumn = [];
            $("#columnSelection").jqxListBox('unselectItem', finText);
            $("#selectedColumn").jqxListBox('removeItem', finText);
        }
        displaySelectedItems();
        $("#columnSelection").on('change', function () {
            displaySelectedItems();
        });
        $(document).on('click', '#listBoxContentselectedColumn a', function (event) {
            var id = event.target.id;
            var text = $("#" + id).parent().text();
            var finText = text.substr(0, text.indexOf(' '));
            removeSelectedItems(finText);
        });
        $.ajax({
            type: "GET",
            contentType: "application/json;charset=utf-8",
            url: BaseAddress + "prmglobal",
            dataType: "json",
            async: false,
            success: function (dateformat, status, jqXHR) {
                var str = "";
                if (dateformat.Data.result != undefined) {
                    var data = dateformat.Data.result;
                    for (var i in data) {
                        if (data[i].prmunit == "DateField") {
                            if (data[i].prmvalue != undefined && data[i].prmvalue != "") {
                                $("#DateField").val(data[i].prmvalue);
                            }
                        }
                        else if (data[i].prmunit == "ServerDate") {
                            $("#ServerDate").val(data[i].prmvalue);
                        }
                    }

                }
                else if (dateformat.Data.e == "E") {
                    if (dateformat.Data.d.length > 0)
                        alert(dateformat.Data.d, '', false, 'E')
                }
            }
        });

        var DateFormat = $("#DateField").val();
        $("#FromDate").datepicker({
            dateFormat: $("#DateField").val(),
            changeMonth: true,
            changeYear: true,
            maxDate: '0',
            onSelect: function (selected) {
                var dt = new Date(selected);
                var dt1 = new Date(selected);
                dt.setDate(dt.getDate());
                $("#ToDate").datepicker("option", "minDate", dt);
                dt1.setDate(dt1.getDate() + 1);
                //$("#ToDate").datepicker("option", "minDate", dt);
                $("#ToDate").datepicker("option", "maxDate", dt1);
                $("#ToDate").datepicker("setDate", dt1);
            }
        });
        $("#ToDate").datepicker({
            dateFormat: $("#DateField").val(),
            changeMonth: true,
            changeYear: true,
            minDate: '0',
            maxDate: '0'
        });
        $("#groupList").change(function () {
            FillMeter();
        });


        $('#btnBack').on('click', function () {
            var dt = new Date($("#FromDate").val());
            var dt1 = new Date($("#FromDate").val());
            dt.setDate(dt.getDate());
            $("#ToDate").datepicker("option", "minDate", dt);
            dt1.setDate(dt1.getDate() + 1);
            $("#ToDate").datepicker("option", "maxDate", dt1);
            $("#ToDate").datepicker("setDate", dt1);
            $("#displayData").html("");
            $("#dvSelectionFilters").show();
            FillMeter();
            $("#selectedColumn").jqxListBox({
                allowDrop: true, allowDrag: true, enableSelection: false, source: FinalColumns, multiple: true, width: 200, height: 250,
                renderer: function (index, label, value) {
                    return "<span>" + label + "</span> <a id='deleteLink" + index + "' class='editor_remove label label-danger btnDelete'>Delete</a>";
                }
            });
            var allItems = $("#selectedColumn").jqxListBox('getItems');
            for (var i = 0; i < allItems.length; i++) {
                $("#selectedColumn").jqxListBox('selectIndex', i);
                $("#columnSelection").jqxListBox('selectItem', allItems[i].label);
            }
            FinalColumns = [];
        });
        $("#updateDetail").click(function () {
            if ($("form").valid()) {
                items = $("#selectedColumn").jqxListBox('getItems');
                if (items.length > 0) {
                    box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
                    itemsParent = $("#columnSelection").jqxListBox('getItems');
                    for (var i = 0; i < items.length; i++) {
                        FinalColumns.push(items[i].label);
                    }
                    for (var i = 0; i < itemsParent.length; i++) {
                        FinalSelectedColumn.push(itemsParent[i].label);
                    }
                    $("#ColumnValue").val(FinalColumns);
                    $("#SelectedColumnOrder").val(FinalSelectedColumn);
                    $("#Group_Name").val($('#groupList option:selected').text());
                    $("#Meter_Name").val($('#meterList option:selected').text());
                }
                else {
                    alert("Please select atleast one parameter", '', false, 'E');
                    return false;
                }
            }
        });
    });

    function lineChart(dateArr, seriesArr, metername, fromdate, todate) {



        var chart = new Highcharts.Chart({
            chart: {
                useHTML: true,
                type: 'spline',
                zoomType: 'x',
                renderTo: 'chart_container',
                spacingLeft: 0,
                marginRight: 120,
                height: 550,
                spacingBottom: 3,
                events: {
                    load: function () {
                        $(window).resize();
                    }
                }
            },
            title: {
                text: '.',
                style: {
                    color: '#FFFFFF'

                },
                x: -20 //center
            },
            subtitle: {
                text: '',
                x: -20
            },
            xAxis: {
                type: 'datetime',
                title: {
                    text: 'Date'
                }
            },
            yAxis: {
                title: {
                    text: 'Value'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                valueSuffix: 'value'
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                borderWidth: 0
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: true
                    },
                    enableMouseTracking: false
                }
            },
            series: seriesArr
        }, function (chart) { // on complete

            chart.renderer.text('<b>Meter Name</b>', 100, 20)
            .css({ 'border': '0px', 'color': 'black', 'margin': '5px 0px', ' font-size': '14px' })
          .add();
            chart.renderer.text(metername, 200, 20)
       .css({})
     .add();

            chart.renderer.text('<b>From Date</b>', 450, 20)
            .css({ 'border': '0px', 'color': 'black', 'margin': '5px 0px', ' font-size': '14px' })
          .add();
            chart.renderer.text(fromdate, 540, 20)
       .css({})
     .add();

            chart.renderer.text('<b>To Date</b>', 730, 20)
            .css({ 'border': '0px', 'color': 'black', 'margin': '5px 0px', ' font-size': '14px' })
          .add();
            chart.renderer.text(todate, 800, 20)
       .css({})
     .add();

        });

    }
    function FillMeter() {
        box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
        var grpId = $('#groupList').val();
        $.ajax({
            url: '@Url.Action("MetersByGroupID", "TrendsData")',
            data: { id: grpId },
            cache: false,
            type: "POST",
            success: function (data) {

                var markup = "";
                var markup = "<option value=''>Select Meters</option>";
                for (var x = 0; x < data.length; x++) {
                    markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                }
                $("#meterList").html(markup).show();
                if ('@Model.MeterId' != '0')
                    $("#meterList").val(@Model.MeterId);
                if (box) box.remove();
            },
            error: function (reponse) {
                if (box) box.remove();
            }
        });
    }
</script>