@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/Highcharts-4.0.1/js/themes/dark-unica.js"></script>
<style>
    .clientlogo01_style, .marquee {
        display: none !important;
    }

    .content-container {
        background-color: #002c4b !important;
    }

    .panel-body {
        background-color: none !important;
    }

    .panel-default {
        border: 0;
    }
</style>
<script>
    $(document).ready(function () {
        $("#chart_container").hide();
        $("#container").hide();
        $("#viewTable").hide();
        var strHeader = "";
        strHeader += "<tr>" +
                        "<th>Date</th>" +
                        "<th>Run Date</th>" +
                        "<th>Block Number</th>" +

                        "<th>Actual(KW)</th>" +
                        "<th>Forecast(KW)</th>";
        strHeader += "</tr>";
        $("#myTable").html(strHeader);
        $.ajax({
            type: "GET",
            async: false,
            contentType: "application/json;charset=utf-8",
            url: BaseAddress + "prmglobal/GetIdentifiersOnModule/dcsgStage",
            dataType: "json",
            success: function (gender, status, jqXHR) {
                var str = "<option value=''>Select</option>";
                if (gender.Data.result != undefined) {
                    var data = gender.Data.result;
                    for (var i in data) {
                        str += "<option value=" + data[i].prmvalue + ">" + data[i].prmidentifier + "</option>";
                    }
                }

                $("#ddLicensee").append(str);
                console.log($('#ddLicensee :selected').text());
            }

        });

        $("#btnChart, #btnFetch").click(function () {
            if ($("#ddLicensee").val() == "" || $("#ddLicensee").val() == null) {
                $("#ddLicensee").focus();
                alert('Please Select Licensee', '', false, 'M');
                return false;
            }
            //if (Date.parse($("#FromDate").val()) > Date.parse( $("#ToDate").val())) {
            //    $("#FromDate").focus();
            //    alert('From Date should be less than To Date', '', false, 'M');
            //    return false;
            //}
            //if ($("#ddInterval").val() == "" || $("#ddInterval").val() == null) {
            //    $("#ddInterval").focus();
            //    alert('Please Select Interval', '', false, 'M');
            //    return false;
            //}
            RetriveData();
            if (this.id == 'btnChart') {
                $("#viewTable").hide();
                $("#chart_container").show();
                $("#container").show();
                $("#btnExport").css("display", "none");
            }
            else {
                $("#viewTable").show();
                $("#chart_container").hide();
                $("#container").hide();
                $("#btnExport").css("display", "block");
            }


        });
        function addZero(i) {
            if (i < 10) {
                i = "0" + i;
            }
            return i;
        }
        function RetriveData() {
            box = new ajaxLoader(this, { classOveride: 'blue-loader', bgColor: '#000' });
            $("#myTable").find("tr:gt(0)").remove();

            var RunDT = $("#RunDate").val();

            var FromDt = $("#FromDate").val();
            var ToDt = $("#ToDate").val();
            var convRun = ConvertYYYYMMDD(RunDT);
            var convFrom = ConvertYYYYMMDD(FromDt);
            var convTo = ConvertYYYYMMDD(ToDt);
            var licensee = $("#ddLicensee").val();
            var Interval = $("#ddInterval").val();

            var str = "";
            var i = 0;
            var table = document.getElementById("myTable");

            var dcsgs = [];
            var inputdemandforecasts = [];
            var demandforecasts = [];

            $.ajax({
                type: "GET",
                url: BaseAddress + "DemandForecastingAPI/GetDemandForecastingData/" + licensee + "/" + convRun + "/" + convFrom + "/" + convTo,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    debugger;
                    var i = 0;
                    var fullData = data.Data.result;
                    var str = "";
                    var avgVal = 0;
                    fullData.forEach(function () {
                        var customDate = new Date(fullData[i].tstamp).getFullYear() + '-' + addZero(new Date(fullData[i].tstamp).getMonth() + 1) + '-' + addZero(new Date(fullData[i].tstamp).getDate()) + ' ' + addZero(new Date(fullData[i].tstamp).getHours()) + ':' + addZero(new Date(fullData[i].tstamp).getMinutes());
                        if (fullData[i].kw == "" || fullData[i].kw == null) {
                            debugger;
                        }
                            //else if ((fullData[i].kw - fullData[i].forecastedvalue) < 600) {
                            //    debugger;
                            //}
                        else {
                            avgVal = avgVal + ((Math.abs(fullData[i].kw - fullData[i].forecastedvalue) / fullData[i].kw) * 100);
                            debugger;
                        }
                        str += "<tr>" +
                                   //"<td>" + new Date(fullData[i].tstamp).toDateString() + " " + new Date(fullData[i].tstamp).toLocaleTimeString() + "</td>" +
                                   "<td>" + customDate + "</td>" +
                                   "<td>" + fullData[i].rundate + "</td>" +
                                   "<td>" + fullData[i].blockno + "</td>" +
                                   //"<td>" + fullData[i].sgvalue + "</td>" +
                                   "<td>" + fullData[i].kw + "</td>" +
                                   "<td>" + fullData[i].forecastedvalue + "</td>";
                        str += "</tr>";

                        dcsgs.push({
                            x: Date.parse(fullData[i].tstamp),
                            y: fullData[i].sgvalue
                        });
                        inputdemandforecasts.push({
                            x: Date.parse(fullData[i].tstamp),
                            y: fullData[i].kw
                        });
                        demandforecasts.push({
                            x: Date.parse(fullData[i].tstamp),
                            y: fullData[i].forecastedvalue
                        });
                        i = i + 1;
                    });
                    debugger;
                    avgVal = 100 - (Math.abs(avgVal) / i);
                    debugger;
                    $("#myTable").append(str);
                    var tempVal = avgVal;
                    lineChart(dcsgs, inputdemandforecasts, demandforecasts, tempVal);
                    if (box) box.remove();
                },
                error: function (xhr, status, error) {
                    debugger;
                    alert(error, '', false, 'E');
                }
            });
            
        }
        //export to excel

        $("#btnExport").on("click", function () {
            debugger;
            var currentdate = new Date();
            var month = currentdate.getMonth() + 1;

            //   var d = currentdate.getDate() + month + "_" + currentdate.getFullYear() + "_" + currentdate.getHours() + currentdate.getMinutes();
            var localdate = currentdate.getDate() + '' + (currentdate.getMonth() + 1) + '' + currentdate.getFullYear() + '_ ' + currentdate.getHours() + '' + currentdate.getMinutes();
            $(".rowheader").remove();
            //$('.data').prepend("<tr class='rowheader' style='display:none;'><th>Meter Name : </th> <th>" + $("#ddlMeters option:selected").text() + "</th></tr><tr  class='rowheader'  style='display:none;'><th>Generated For : </th> <th>" + $("#ddlMonth option:selected").text() + " " + $("#ddlYear option:selected").text() + "</th> </tr>   <tr  class='rowheader' style='display:none;'><th></th><th></th><th></th> <th></th> </tr>");
            $(".data").table2excel({
                exclude: ".noExl",
                name: "Demand_Forecasting",
                filename: "Demand_Forecasting_" + localdate,
                fileext: ".xls",
                exclude_img: true,
                exclude_links: true,
                exclude_inputs: true
            });
        });

        $("#btnExport").css("display", "none");
        function lineChart(dcsgs, inputdemandforecasts, demandforecasts, tempVal) {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                }
            });
            var chart = new Highcharts.Chart({
                chart: {
                    type: 'spline',
                    backgroundColor: 'none',
                    zoomType: 'x',
                    renderTo: 'chart_container'
                },
                title: {
                    text: 'Demand Forecast',
                    style: {
                        fontSize: '30px'
                    }
                },
                subtitle: {
                    text: 'Click and drag in the plot area to zoom in',
                    style: {
                        fontSize: '20px'
                    }
                },
                xAxis: {
                    type: 'datetime',
                    //dateTimeLabelFormats: { // don't display the dummy year
                    //    month: '%e. %b',
                    //    year: '%b'
                    //},
                    title: {
                        text: 'Date', style: {
                            fontSize: '20px'
                        }
                    },

                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Snow depth (m)', style: {
                            fontSize: '20px'
                        }
                    },
                    min: 0
                },
                //tooltip: {
                //    headerFormat: '<b>{series.name}</b><br>',
                //    pointFormat: '{point.x:%e. %b}: {point.y:.2f} m'
                //},

                tooltip: {
                    formatter: function () {
                        return '<b>' + this.series.name + '</b><br/>' +
                            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                            Highcharts.numberFormat(this.y, 2);
                    }
                },

                plotOptions: {
                    spline: {
                        marker: {
                            enabled: true
                        }
                    },
                    series: {
                        turboThreshold: 5000//set it to a larger threshold, it is by default to 1000
                    }
                },

                series: [
                //{
                //    name: 'SG',
                //    data: dcsgs
                //},
                {
                    name: 'Actual',
                    data: inputdemandforecasts
                },
                {
                    name: 'Forecasted',
                    data: demandforecasts
                },
                ]
            });

            var chart2 = new Highcharts.Chart({
                chart: {
                    backgroundColor: 'none',
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: true,
                    type: 'pie',
                    renderTo: 'container'
                },
                title: {
                    text: 'Accuracy Meter',
                    style: {
                        fontSize: '30px'
                    }
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>',
                    style: {
                        fontSize: '20px'
                    }
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        borderWidth: 0,
                        dataLabels: {
                            enabled: false,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        }
                    }
                },
                series: [{
                    name: 'Accuracy',
                    colorByPoint: true,
                    data: [{
                        name: 'Accuracy',
                        y: tempVal,
                        color: '#0080ff'

                        , dataLabels:
                                                {
                                                    enabled: true,
                                                    format: "<strong>{point.percentage:.0f}%</strong>",
                                                    distance: -10,
                                                    color: "white",
                                                    style: {
                                                        fontSize: '35px'
                                                    }

                                                }

                    }, {
                        name: 'Error',
                        y: 100 - tempVal,
                        sliced: false,
                        selected: false
                                            , color: "none"

                                            , dataLabels:
                                                {
                                                    enabled: false,
                                                    format: "<strong>{point.percentage:.0f}%</strong>",
                                                    distance: -10,
                                                    color: "white",

                                                    style: {
                                                        fontSize: '35px'
                                                    }
                                                }
                    }
                    ]
                }]
            });
        }

    });
    function ConvertYYYYMMDD(date) {
        var dateFormat = $("#DateField").val();
        var DateArr;
        if (date.indexOf("/") > 0) {
            while (date.indexOf("/") > 0) {
                date = date.replace("/", "-");
                dateFormat = dateFormat.replace("/", "-");
            }
        }
        if (dateFormat.toUpperCase() == "DD-MM-YY" || dateFormat.toUpperCase() == "DD-MM-YYYY") {
            DateArr = date.split('-');
            return DateArr[2] + "-" + DateArr[1] + "-" + DateArr[0];
        } else if (dateFormat.toUpperCase() == "MM-DD-YY" || dateFormat.toUpperCase() == "MM-DD-YYYY") {
            DateArr = date.split('-');
            return DateArr[2] + "-" + DateArr[0] + "-" + DateArr[1];
        } else if (dateFormat.toUpperCase() == "YY-MM-DD" || dateFormat.toUpperCase() == "YYYY-MM-DD") {
            DateArr = date.split('-');
            return DateArr[0] + "-" + DateArr[1] + "-" + DateArr[2];
        }
    }
</script>
<form>
    <div class="panel panel-default">
        <input id="DateField" type="hidden" />
        <input id="ServerDate" type="hidden" />
        <div class="panel-heading">
            <div class=" dashboard-panel-body-box"><h3>Demand Forecasting</h3></div>
            <div class="panel-actions  dashboard-panel-body-boxcontrols">
            </div>
        </div>
        <div class="panel-body">
            <div class="form-group">

                <div class="row">
                    <div class="col-md-2">
                        @Html.Label("Licensee", new { @class = "control-label" })

                        <select id="ddLicensee" name="ddLicensee" class="form-control"></select>
                    </div>

                    @*@Html.Label("Interval", new { @class = "control-label col-md-1 text-right" })
                        <div id="divInterval" class="col-md-2">

                            <select id="ddInterval" name="ddInterval" class="form-control">
                                <option value="">Select</option>
                                <option value="Daily">Daily</option>
                                <option value="Weekly">Weekly</option>
                                <option value="Monthly">Monthly</option>
                            </select>
                        </div>*@
                    <div id="dtRunDate" class="col-md-2">
                        @Html.Label("Run Date", new { @class = "control-label" })
                        <input type="text" id="RunDate" name="RunDate" class="form-control" readonly />
                    </div>
                    <div id="dtFromDate" class="col-md-2">
                        @Html.Label("From Date", new { @class = "control-label" })
                        <input type="text" id="FromDate" name="FromDate" class="form-control" readonly />
                    </div>
                    <div id="dtToDate" class="col-md-2">
                        @Html.Label("To Date", new { @class = "control-label" })
                        <input type="text" id="ToDate" name="ToDate" class="form-control" readonly />
                    </div>


                    <div class="col-md-1 pull-right">
                        <label>&nbsp;</label>
                        <input type="button" value="Chart" id="btnChart" class="toggle btn btn-info" />
                    </div>
                    <div class="col-md-1 pull-right">
                        <label>&nbsp;</label>
                        <input type="button" value="Table" id="btnFetch" class="toggle btn btn-warning" />
                    </div>
                    <div class="col-md-1 pull-right">
                        <label>&nbsp;</label>
                        <input type="button" value="Export" id="btnExport" class="toggle btn btn-success" />
                    </div>
                    @*<button type="button" class="btn btn-success" id="btnExport" style="font-weight:bold;  margin:0px 10px 10px;">Export To Excel</button>*@
                </div>









            </div>




        </div>
    </div>

    <div class="clearfix"></div>

    <div id="viewTable">
        <table id="myTable" style="margin-top:15px;" class="table table-striped table-bordered table-condensed  table-fixed data"></table>
    </div>
    <div class="clearfix"></div>
    <div class="row">
        <div class="col-md-9">
            <div id='chart_container' style="width:100%">

            </div>
        </div>
        <div id="container" class="col-md-3" style="border-left: 1px solid #61a3d2;"> </div>
    </div>
</form>

<script>
    $(document).ready(function () {
        $.ajax({
            type: "GET",
            contentType: "application/json;charset=utf-8",
            url: BaseAddress + "prmglobal",
            dataType: "json",
            async: false,
            success: function (dateformat, status, jqXHR) {
                var str = "";
                if (dateformat.Data.result != undefined) {
                    var data = dateformat.Data.result;
                    for (var i in data) {
                        if (data[i].prmunit == "DateField") {
                            if (data[i].prmvalue != undefined && data[i].prmvalue != "") {
                                $("#DateField").val(data[i].prmvalue);
                            }
                        }
                        else if (data[i].prmunit == "ServerDate") {
                            $("#ServerDate").val(data[i].prmvalue);
                        }
                    }

                }
                else if (dateformat.Data.e == "E") {
                    if (dateformat.Data.d.length > 0)
                        alert(dateformat.Data.d, '', false, 'E')
                }
            }
        });



        $("#RunDate").datepicker({
            dateFormat: $("#DateField").val(),
            changeMonth: true,
            changeYear: true,
            maxDate: '0'
        }).datepicker('setDate', new Date());

        $("#FromDate,#ToDate").datepicker({
            dateFormat: $("#DateField").val(),
            changeMonth: true,
            changeYear: true,
            maxDate: '60'
        }).datepicker('setDate', new Date());

    });


</script>