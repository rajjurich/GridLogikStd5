@model List<EToolsViewer.APIModels.GetInstanceData>
@{
    Layout = "~/Views/Shared/_EToolsLayout1.cshtml";
}
<script src="~/Scripts/moment.js"></script>
<style>
    .table-style_01 th, .table-style_01 td {
        background: #2f2f2f !important;
        color: #17bab8;
        font-size: 16px;
        text-align: center;
    }

    .table-style_02 th, .table-style_02 td {
        background: #2f2f2f !important;
        color: #ed9979;
        font-size: 16px;
        text-align: center;
    }

    .table-style_03 th, .table-style_03 td {
        background: #2f2f2f !important;
        color: #f02d99;
        font-size: 16px;
        text-align: center;
    }

    .table-style_04 th, .table-style_04 td {
        background: #2f2f2f !important;
        color: #ebd504;
        font-size: 16px;
        text-align: center;
    }

    .table-style_05 th, .table-style_05 td {
        background: #2f2f2f !important;
        color: #00adef;
        font-size: 16px;
        text-align: center;
    }

    .table-style_06 th, .table-style_06 td {
        background: #2f2f2f !important;
        color: #83c338;
        font-size: 16px;
        text-align: center;
    }

    .table-hover_01 > tbody > tr:hover > td, .table-hover_01 > tbody > tr:hover > th {
        background-color: #f00 !important;
    }

    .panel-default > .panel-heading {
        padding: 2px 10px;
    }

    .bgimg {
        background-image: url('../Content/images/UnitBlock.png');
    }
</style>
<div class="col-lg-12">

    <div class="form-group col-md-4" style="border:0px solid #f00;">
        <h1><b>UNIT 2 </h1>


    </div>

</div>
<br />
@*background-image: url(/Content/images/SLD1.png); background-size: 100px 100px*@
@*kunal new abt*@
<div class="row">
    <div class="col-lg-12" style="border: 0px solid #000;">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class=" dashboard-panel-body-box" style="font-size:25px; font-weight:bold;"><h3 id="datetidvalue" style="color: lightgreen;"></h3></div>

            </div>
            <div style=" height:960px; width: 1500px; border: 0px solid #000; background-image: url(/Content/images/Drawing9.png);background-repeat: no-repeat;background-size: contain;">

                <label id="CurrentBlockDC" style="position: absolute; top: 120px; left: 210px; width: 100%; font-size: 50px; color: maroon"></label>
                <label id="CurrentBlockNo" style="position: absolute; top: 120px; left: 680px; width: 100%; font-size: 50px; color: maroon"></label>
                <label id="CurrentBlockSG" style="position: absolute; top: 120px; left: 1100px; width: 100%;font-size:50px;color:maroon"></label>
                <label id="InstMW" style="position: absolute; top: 259px; left: 210px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="InstFreq" style="position: absolute; top: 363px; left: 210px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="dacbSG" style="position: absolute; top: 470px; left: 210px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="APCValue" style="position: absolute; top: 570px; left: 210px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="TimeRemaining" style="position: absolute; top: 480px; left:630px; width: 100%;font-size:65px;color:maroon"></label>
                <label id="AvgMw" style="position: absolute; top: 259px; left: 1100px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="AvgFreq" style="position: absolute; top: 363px; left: 1100px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="DevMw" style="position: absolute; top: 470px; left: 1100px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="DevRate" style="position: absolute; top: 570px; left: 1100px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="CBlockPos" style="position: absolute; top: 750px; left: 700px; width: 100%;font-size:30px;color:maroon"></label>
                <label id="CBlockNeg" style="position: absolute; top: 795px; left: 700px; width: 100%;font-size:30px;color:maroon"></label>
                <label id="n4BlkNo1" style="position: absolute; top: 700px; left: 1040px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkDC1" style="position: absolute; top: 700px; left: 1150px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkSG1" style="position: absolute; top: 700px; left: 1240px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkNo2" style="position: absolute; top: 750px; left: 1040px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkDC2" style="position: absolute; top: 750px; left: 1150px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkSG2" style="position: absolute; top: 750px; left: 1240px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkNo3" style="position: absolute; top: 800px; left: 1040px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkDC3" style="position: absolute; top: 800px; left: 1150px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkSG3" style="position: absolute; top: 800px; left: 1240px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkNo4" style="position: absolute; top: 850px; left: 1040px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkDC4" style="position: absolute; top: 850px; left: 1150px; width: 100%;font-size:30px;color:green"></label>
                <label id="n4BlkSG4" style="position: absolute; top: 850px; left: 1240px; width: 100%;font-size:30px;color:green"></label>
                <label id="Line1" style="position: absolute; top: 700px; left: 115px; width: 100%;font-size:35px;color:green"></label>
                <label id="Line2" style="position: absolute; top: 760px; left: 115px; width: 100%;font-size:35px;color:green"></label>
                <label id="Gen2" style="position: absolute; top: 259px; left: 680px; width: 100%;font-size:35px;color:maroon"></label>
                <label id="GT2" style="position: absolute; top: 363px; left: 680px; width: 100%;font-size:35px;color:maroon"></label>

            </div>
        </div>

    </div>

    <script>


        var meterids = new Array();
        var meterids_unit = new Array();
        var meterids_line = new Array();
        var requestelapased = 0;
        var cur_blk_no = 0;
        var GBreakFrq = 0;
        var GAvg = 0;
        var flag = 0;
        var p1 = 0;
        var p2 = 0;
        var p3 = 0;
        var MeterString = "1,2,3,4,5,6,7";
        var MeterIdList = {
            "MeterString": MeterString

        };
        //window.setInterval(function () { alert('hello', '', false, 'S'); }, 5000);

        $(document).ready(function () {
            //



            ABTMeterDetails();
            LoadRABTData();
            nextfourblockandlastblkdata();
            //CUMULATIVE UPTO LAST BLOCK DATA ENDS HERE
        });


        setInterval(function () { LoadRABTData(); }, 7000);
        // setInterval(function () { LoadInstanceDataRABT(); }, 1000);
        setInterval(function () { nextfourblockandlastblkdata(); }, 10000);

        setInterval(function () { LoadRABTData(); }, 5000);
        // setInterval(function () { LoadInstanceDataRABT(); }, 1000);
        setInterval(function () { nextfourblockandlastblkdata(); }, 5000);


        setInterval(ABTMeterDetails, 900);
        function ABTMeterDetails() {
            debugger
            var dateNow = new Date();
            var dateFuture = new Date(dateNow.getFullYear(), dateNow.getMonth(), dateNow.getDate(), 0, 0, 0, 0);


            var seconds = Math.floor((dateNow - (dateFuture)) / 1000);
            var minutes = Math.floor(seconds / 60);

            var ModTime = (parseInt(minutes / 15)) + 1;
            var items = [[1, "00:00-00:15"],
                                   [2, "00:15-00:30"],
                                   [3, "00:30-00:45"],
                                   [4, "00:45-01:00"],
                                   [5, "01:00-01:15"],
                                   [6, "01:15-01:30"],
                                   [7, "01:30-01:45"],
                                   [8, "01:45-02:00"],
                                   [9, "02:00-02:15"],
                                   [10, "02:15-02:30"],
                                   [11, "02:30-02:45"],
                                   [12, "02:45-03:00"],
                                   [13, "03:00-03:15"],
                                   [14, "03:15-03:30"],
                                   [15, "03:30-03:45"],
                                   [16, "03:45-04:00"],
                                   [17, "04:00-04:15"],
                                   [18, "04:15-04:30"],
                                   [19, "04:30-04:45"],
                                   [20, "04:45-05:00"],
                                   [21, "05:00-05:15"],
                                   [22, "05:15-05:30"],
                                   [23, "05:30-05:45"],
                                   [24, "05:45-06:00"],
                                   [25, "06:00-06:15"],
                                   [26, "06:15-06:30"],
                                   [27, "06:30-06:45"],
                                   [28, "06:45-07:00"],
                                   [29, "07:00-07:15"],
                                   [30, "07:15-07:30"],
                                   [31, "07:30-07:45"],
                                   [32, "07:45-08:00"],
                                   [33, "08:00-08:15"],
                                   [34, "08:15-08:30"],
                                   [35, "08:30-08:45"],
                                   [36, "08:45-09:00"],
                                   [37, "09:00-09:15"],
                                   [38, "09:15-09:30"],
                                   [39, "09:30-09:45"],
                                   [40, "09:45-10:00"],
                                   [41, "10:00-10:15"],
                                   [42, "10:15-10:30"],
                                   [43, "10:30-10:45"],
                                   [44, "10:45-11:00"],
                                   [45, "11:00-11:15"],
                                   [46, "11:15-11:30"],
                                   [47, "11:30-11:45"],
                                   [48, "11:45-12:00"],
                                   [49, "12:00-12:15"],
                                   [50, "12:15-12:30"],
                                   [51, "12:30-12:45"],
                                   [52, "12:45-13:00"],
                                   [53, "13:00-13:15"],
                                   [54, "13:15-13:30"],
                                   [55, "13:30-13:45"],
                                   [56, "13:45-14:00"],
                                   [57, "14:00-14:15"],
                                   [58, "14:15-14:30"],
                                   [59, "14:30-14:45"],
                                   [60, "14:45-15:00"],
                                   [61, "15:00-15:15"],
                                   [62, "15:15-15:30"],
                                   [63, "15:30-15:45"],
                                   [64, "15:45-16:00"],
                                   [65, "16:00-16:15"],
                                   [66, "16:15-16:30"],
                                   [67, "16:30-16:45"],
                                   [68, "16:45-17:00"],
                                   [69, "17:00-17:15"],
                                   [70, "17:15-17:30"],
                                   [71, "17:30-17:45"],
                                   [72, "17:45-18:00"],
                                   [73, "18:00-18:15"],
                                   [74, "18:15-18:30"],
                                   [75, "18:30-18:45"],
                                   [76, "18:45-19:00"],
                                   [77, "19:00-19:15"],
                                   [78, "19:15-19:30"],
                                   [79, "19:30-19:45"],
                                   [80, "19:45-20:00"],
                                   [81, "20:00-20:15"],
                                   [82, "20:15-20:30"],
                                   [83, "20:30-20:45"],
                                   [84, "20:45-21:00"],
                                   [85, "21:00-21:15"],
                                   [86, "21:15-21:30"],
                                   [87, "21:30-21:45"],
                                   [88, "21:45-22:00"],
                                   [89, "22:00-22:15"],
                                   [90, "22:15-22:30"],
                                   [91, "22:30-22:45"],
                                   [92, "22:45-23:00"],
                                   [93, "23:00-23:15"],
                                   [94, "23:15-23:30"],
                                   [95, "23:30-23:45"],
                                   [96, "23:45-00:00"]]

            var items1 = [items[ModTime - 1][1]].toString();

            var CurrentDateNow = dateNow;
            var y = CurrentDateNow.getFullYear();
            var m = CurrentDateNow.getMonth();
            var dater = CurrentDateNow.getDate();
            var stringData = items1.split("-");
            var s = stringData[1].split(":");
            var h = s[0];
            var min = s[1];
            var prevTime = new Date(y, m, dater, h, min, 0, 0);
            var diff = prevTime - CurrentDateNow;
            var s1 = stringData[0].split(":");
            var h1 = s1[0];
            var min1 = s1[1];
            var prevTime1 = new Date(y, m, dater, h1, min1, 0, 0);
            var diff1 = CurrentDateNow - prevTime1;
            var secondx = parseInt((diff / 1000) % 60);
            var minutes = parseInt((diff / (1000 * 60)) % 60);
            var secondx1 = parseInt((diff1 / 1000) % 60);
            var minutes1 = parseInt((diff1 / (1000 * 60)) % 60);
            // var hours = parseInt((diff / (1000 * 60 * 60)) % 24);
            if (secondx.toString().length == 1) {
                secondx = "0" + secondx;
            }
            if (minutes.toString().length == 1) {
                minutes = "0" + minutes;
            }
            if (secondx1.toString().length == 1) {
                secondx1 = "0" + secondx1;
            }
            if (minutes1.toString().length == 1) {
                minutes1 = "0" + minutes1;
            }

            $("#TimeRemaining").text(minutes.toString() + ":" + secondx.toString()).toString();
            $("#CurrentBlockTimeElapseddata").text(minutes1.toString() + ":" + secondx1.toString());



        }

        function LoadRABTData() {
            var APC = 0, APCPer = 0;
            var Line = 0, Gen = 0;
            debugger;
            requestelapased = requestelapased + 1;
            //if (requestelapased > 270) {
            //    requestelapased = 1;
            //    //
            //    window.location.reload(true);
            //}
            //
            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",//type of data to be send
                //url: "http://localhost:8487/EnvisageWebAPI/api/utility",
                url: BaseAddress + "InstanceDataAPIILFS/GetInstanceDataRABT_New",
                //async: false,
                dataType: "json",//type of data to be received
                success: function (meters, status, jqXHR) {
                    //
                    var str = "";
                    var BusFreq = 0;
                    var BusVolt = 0;
                    var MW = 0;
                    var MVAR = 0;
                    var AvgHz = 0;
                    var finaldate = new Date();
                    if (meters.Data.result != undefined) {



                        meters.Data.result.forEach(function (response) {
                            //
                            debugger;




                            if (response.meterid == 6) {

                                $("#G1").html(response.kw.toFixed(2));
                                Gen = Gen + +response.cblk_avg_mw;
                            }
                            else if (response.meterid == 7) {

                                $("#G2").html(response.kw.toFixed(2)); // Unit meter 1

                                $("#Gen2").html(response.kw.toFixed(2)); // Unit meter 1
                                // Gen = Gen + +response.cblk_avg_mw;
                            }
                            else if (response.meterid == 3) {

                                $("#GT1").html(response.kw.toFixed(2)); // Unit meter 1
                            }
                            else if (response.meterid == 4) {

                                $("#GT2").html(response.kw.toFixed(2)); // Unit meter 1
                            }
                            else if (response.meterid == 5) {

                                $("#SBT").html(response.kw.toFixed(2)); // Unit meter 1
                            }
                            else if (response.meterid == 1) {

                                $("#Line1").html("Line 1:  " + response.kw.toFixed(2));
                                Line = Line + response.cblk_avg_mw;

                            }
                            else if (response.meterid == 2) {

                                $("#Line2").html("Line 2:  " + response.kw.toFixed(2));
                                Line = Line + response.cblk_avg_mw;
                            }
                            //ends here


                            var d = new Date(response.CurrentTime);
                            var month = (d.getMonth() + 1).toString();
                            if (month.toString().length == 1) {
                                month = "0" + month;
                            }
                            var hours = d.getHours().toString();
                            if (hours.length == 1) {
                                hours = "0" + hours;
                            }
                            var minutes = d.getMinutes().toString();
                            if (minutes.length == 1) {
                                minutes = "0" + minutes;
                            }
                            var seconds = d.getSeconds().toString();
                            if (seconds.length == 1) {
                                seconds = "0" + seconds;
                            }
                            var date = d.getDate() + "-" + month + "-" + d.getFullYear() + "  ;  " + hours + ":" + minutes + ":" + seconds;

                            $("#datetidvalue").text("Date & Time : " + date.toString());


                        });
                        debugger
                        APC = (Gen - Line) / Gen;

                        APCPer = APC * 100;
                        $("#APCValue").html(APCPer.toFixed(3));

                    }




                },
                error: function (xhr, status, error) {
                    // alert(error);
                    if (box) box.remove();
                }
            });

            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",//type of data to be send
                //url: "http://localhost:8487/EnvisageWebAPI/api/utility",
                url: BaseAddress + "LoadSurveryABTILFS/GetDecisionAspectCumBlock_New",
                async: false,
                dataType: "json",//type of data to be received
                success: function (meters, status, jqXHR) {
                    //
                    var timer = meters.Data.result;

                    //CumExpDCPerc = (parseFloat(result.substring(0, result.indexOf("/") - 1)) / parseFloat(result.substring(result.indexOf("/") + 1))) * 100;
                    //$("#dacExpDC").html(parseFloat(timer.expdcperc).toFixed(2));

                    //$("#dacPosBlk").html(timer.posblk);
                    //$("#dacNegBlk").html(timer.negblk);


                    $("#lblBusFreq").html(parseFloat(timer.bekfreq));

                },
                error: function (xhr, status, error) {
                    // alert(error);
                    if (box) box.remove();
                }
            });
            //current block and depending calculation

            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",//type of data to be send
                //url: "http://localhost:8487/EnvisageWebAPI/api/utility",
                //url: BaseAddress + "InstanceDataAPIILFS/GetInstanceDataRABT_CurrentBlockNX4",
                url: BaseAddress + "InstanceDataAPIILFS/GetInstanceDataRABT_CurrentBlockNX4_FinalUnit2",
                //async: false,
                dataType: "json",//type of data to be received
                success: function (meters, status, jqXHR) {
                    //
                    var currentindexno = 0;
                    var response = meters.Data.result;

                    response.lasttwoblockdata.forEach(function (response) {

                        if (currentindexno == 0) {
                            if (cur_blk_no == "") {
                                cur_blk_no = response.blockno;
                            }

                            //var CurrentDateNow = new Date(response.CurrentTime);
                            //var y = CurrentDateNow.getFullYear();
                            //var m = CurrentDateNow.getMonth();
                            //var dater = CurrentDateNow.getDate();
                            //var stringData = response.blocktime.split("-");
                            //var s = stringData[1].split(":");
                            //var h = s[0];
                            //var min = s[1];
                            //var prevTime = new Date(y, m, dater, h, min, 0, 0);
                            //var diff = prevTime - CurrentDateNow;
                            //var s1 = stringData[0].split(":");
                            //var h1 = s1[0];
                            //var min1 = s1[1];
                            //var prevTime1 = new Date(y, m, dater, h1, min1, 0, 0);
                            //var diff1 = CurrentDateNow - prevTime1;
                            //var secondx = parseInt((diff / 1000) % 60);
                            //var minutes = parseInt((diff / (1000 * 60)) % 60);
                            //var secondx1 = parseInt((diff1 / 1000) % 60);
                            //var minutes1 = parseInt((diff1 / (1000 * 60)) % 60);
                            //// var hours = parseInt((diff / (1000 * 60 * 60)) % 24);
                            //if (secondx.toString().length == 1) {
                            //    secondx = "0" + secondx;
                            //}
                            //if (minutes.toString().length == 1) {
                            //    minutes = "0" + minutes;
                            //}
                            //if (secondx1.toString().length == 1) {
                            //    secondx1 = "0" + secondx1;
                            //}
                            //if (minutes1.toString().length == 1) {
                            //    minutes1 = "0" + minutes1;
                            //}

                            //$("#TimeRemaining").text(minutes.toString() + ":" + secondx.toString()).toString();
                            //$("#CurrentBlockTimeElapseddata").text(minutes1.toString() + ":" + secondx1.toString());

                            //var s1 = stringData[0].split(":");
                            //var v1 = (s1[1] - CurrentDateNow.getMinutes()).toString() + ":" + (CurrentDateNow.getSeconds()).toString();
                            //var v2 = v1.split("-");
                            $("#CurrentBlockNo").html(response.blockno);
                            $("#CurrentBlockNumberdata").html(response.blockno);
                            $("#CurrentBlockTime").html(response.blocktime);


                            $("#cbdBlockTime").html(response.blocktime);
                            $("#CurrentBlockDC").html(response.dcmw);
                            $("#CurrentBlockSG").html(response.sgmw);
                            $("#InstMW").html(parseFloat(response.mw).toFixed(3));
                            $("#AvgMw").html(parseFloat(response.netexbusmw).toFixed(3));
                            $("#cbdNexExBus").html(parseFloat(response.netexbusmw).toFixed(3));
                            $("#cbdAvgHz").html(parseFloat(response.avghz).toFixed(2));
                            $("#AvgFreq").html(parseFloat(response.avghz).toFixed(2));
                            $("#InstFreq").html(parseFloat(response.hz).toFixed(2));
                            $("#cbdExpDC").html(parseFloat(response.expdcperc).toFixed(2)); //current block Exp DC %
                            $("#cbdExpSG").html(parseFloat(response.expscperc).toFixed(2)); //current block Exp SG %

                            $("#cbdBackingDown").html(parseFloat(response.backingdown).toFixed(2));
                            $("#DevMw").html(parseFloat(response.devmw).toFixed(2));

                            $("cbdDevRs").html(parseFloat(response.devrs).toFixed(2));

                            $("#cbdTotalDev").html(parseFloat(response.totaldevrs).toFixed(2));

                            $("#cbdNetGain").html(parseFloat(response.netgainloss).toFixed(3));
                            $("#cbdFuelCost").html(parseFloat(response.fuelcost).toFixed(3));
                            $("#cbdAddiDev").html(parseFloat(response.addidevrs).toFixed(2));
                            $("#DevRate").html(parseFloat(response.devrate).toFixed(3));
                            $("#CurrentFualRate").html(parseFloat(response.fuelrate).toFixed(2));
                            $("#cbdFuelRate").html(parseFloat(response.fuelrate).toFixed(2));
                            $("#cbdDevRs").html(parseFloat(response.devrs).toFixed(2));

                            //CurBlkAvgMW = parseFloat(response.netexbusmw).toFixed(2);

                            if (parseFloat(response.devrate).toFixed(2) > parseFloat(response.fuelrate).toFixed(2)) {
                                $("#cbdAvgHz").css("color", "red");
                            }
                            else {
                                $("#cbdAvgHz").css("color", "#FFBB00");
                            }


                            currentindexno = currentindexno + 1;
                        }
                        else {

                        }
                    });

                    //

                    $("#dacbSG").html(parseFloat(response.for100sg).toFixed(2));

                    $("#dacbOpOverInj").html(parseFloat(response.limopoverinj).toFixed(2));
                    $("#dacbOpUnderInj").html(parseFloat(response.limopunderinj).toFixed(2));
                    $("#dacbAROverInj").html(parseFloat(response.askrateoverinj).toFixed(2));
                    $("#dacbARUnderInj").html(parseFloat(response.askrateunderinj).toFixed(2));

                    $("#dacExpDC").html(parseFloat(response.cumexpdcperc).toFixed(2));



                    $("#CBlockPos").html(response.posblk);

                    $("#CBlockNeg").html(response.negblk);




                    $("#dacPosBlk").html(response.posblk);
                    $("#dacNegBlk").html(response.negblk);

                    $("#dacbOverInjBlk").html(parseFloat(response.overinjoppblk).toFixed(2));
                    $("#dacbUnderInjBlk").html(parseFloat(response.underinjoppblk).toFixed(2));



                },
                error: function (xhr, status, error) {
                    // alert(error);
                    if (box) box.remove();
                }
            });
            //CURRENT BLOCK & PREVIOUS BLOCK ENDS HERE







        }


        function nextfourblockandlastblkdata() {
            //NEXT FOUR BLOCK DATA
            $.ajax({
                type: "GET",
                contentType: "application/json;charset=utf-8",//type of data to be send
                url: BaseAddress + "LoadSurveryABTILFS/GetNextFourBlocks_FinalUnit2",
                //async: false,
                dataType: "json",//type of data to be received
                success: function (meters, status, jqXHR) {
                    //

                    var indexN4 = 1;
                    try {
                        meters.Data.result.forEach(function (response) {
                            //
                            try {
                                if (response.blockno > 0) {
                                    $("#n4BlkDC" + indexN4).html(response.dcvalue);


                                    // $("#n4BlkDC" + indexN4).html(response.dcvalue);
                                    $("#n4BlkSG" + indexN4).html(response.sgvalue);
                                    $("#N4BlkFTF" + indexN4).html(response.ftfhz);
                                    $("#n4BlkNo" + indexN4).html(response.blockno);

                                    indexN4 = indexN4 + 1;
                                }
                            } catch (e) {

                            }

                        })
                    }
                    catch (e) {

                    }

                },
                error: function (xhr, status, error) {
                    // alert(error);
                    if (box) box.remove();
                }
            });
            //NEXT FOUR BLOCK DATA ENDS HERE

            //CUMULATIVE UPTO LAST BLOCK DATA

        }




    </script>
